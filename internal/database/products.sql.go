// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at
) VALUES (
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    NOW(),
    NOW()
)
RETURNING id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at
`

type CreateProductParams struct {
	Name         string
	Manufacturer string
	Description  string
	Price        int32
	Cost         int32
	Stock        int32
	Type         ProductType
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Name,
		arg.Manufacturer,
		arg.Description,
		arg.Price,
		arg.Cost,
		arg.Stock,
		arg.Type,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manufacturer,
		&i.Description,
		&i.Price,
		&i.Cost,
		&i.Stock,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id uuid.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manufacturer,
		&i.Description,
		&i.Price,
		&i.Cost,
		&i.Stock,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProductByName = `-- name: GetProductByName :one
SELECT id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at FROM products WHERE name = $1
`

func (q *Queries) GetProductByName(ctx context.Context, name string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByName, name)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manufacturer,
		&i.Description,
		&i.Price,
		&i.Cost,
		&i.Stock,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Manufacturer,
			&i.Description,
			&i.Price,
			&i.Cost,
			&i.Stock,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsByType = `-- name: GetProductsByType :many
SELECT id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at FROM products WHERE type = $1
`

func (q *Queries) GetProductsByType(ctx context.Context, type_ ProductType) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Manufacturer,
			&i.Description,
			&i.Price,
			&i.Cost,
			&i.Stock,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET
    name = $1,
    manufacturer = $2,
    description = $3,
    price = $4,
    cost = $5,
    stock = $6,
    type = $7,
    updated_at = NOW()
WHERE id = $8
RETURNING id, name, manufacturer, description, price, cost, stock, type, created_at, updated_at
`

type UpdateProductParams struct {
	Name         string
	Manufacturer string
	Description  string
	Price        int32
	Cost         int32
	Stock        int32
	Type         ProductType
	ID           uuid.UUID
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Name,
		arg.Manufacturer,
		arg.Description,
		arg.Price,
		arg.Cost,
		arg.Stock,
		arg.Type,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manufacturer,
		&i.Description,
		&i.Price,
		&i.Cost,
		&i.Stock,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
