// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addItemToCart = `-- name: AddItemToCart :one
INSERT INTO cart_item (
    medicine_id, cart_id, quantity, price
) VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING cart_id
`

type AddItemToCartParams struct {
	MedicineID uuid.UUID
	CartID     uuid.UUID
	Quantity   int32
	Price      int32
}

func (q *Queries) AddItemToCart(ctx context.Context, arg AddItemToCartParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, addItemToCart,
		arg.MedicineID,
		arg.CartID,
		arg.Quantity,
		arg.Price,
	)
	var cart_id uuid.UUID
	err := row.Scan(&cart_id)
	return cart_id, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO cart(user_id) VALUES($1) RETURNING id
`

func (q *Queries) CreateCart(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createCart, userID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM cart
WHERE cart.user_id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCart, userID)
	return err
}

const getCart = `-- name: GetCart :many
SELECT
    cart.id AS cart_id,
    cart.created_at,
    ci.id,
    ci.medicine_id,
    m.name AS medicine_name,
    ci.quantity,
    m.price AS price
FROM cart
LEFT JOIN cart_item ci ON cart.id = ci.cart_id
LEFT JOIN medicines m ON ci.medicine_id = m.id
WHERE cart.user_id = $1
`

type GetCartRow struct {
	CartID       uuid.UUID
	CreatedAt    sql.NullTime
	ID           sql.NullInt32
	MedicineID   uuid.NullUUID
	MedicineName sql.NullString
	Quantity     sql.NullInt32
	Price        sql.NullInt32
}

func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) ([]GetCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.CartID,
			&i.CreatedAt,
			&i.ID,
			&i.MedicineID,
			&i.MedicineName,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCartByUserID = `-- name: GetCartByUserID :one
SELECT id FROM cart WHERE user_id = $1
`

func (q *Queries) GetCartByUserID(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCartByUserID, userID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const removeCartItem = `-- name: RemoveCartItem :exec
DELETE FROM cart_item
WHERE cart_item.cart_id = $1
AND medicine_id = $2
`

type RemoveCartItemParams struct {
	CartID     uuid.UUID
	MedicineID uuid.UUID
}

func (q *Queries) RemoveCartItem(ctx context.Context, arg RemoveCartItemParams) error {
	_, err := q.db.ExecContext(ctx, removeCartItem, arg.CartID, arg.MedicineID)
	return err
}

const updateCartItem = `-- name: UpdateCartItem :exec
UPDATE cart_item
SET
    quantity = $1
WHERE
    medicine_id = $2
    AND cart_id = $3
`

type UpdateCartItemParams struct {
	Quantity   int32
	MedicineID uuid.UUID
	CartID     uuid.UUID
}

func (q *Queries) UpdateCartItem(ctx context.Context, arg UpdateCartItemParams) error {
	_, err := q.db.ExecContext(ctx, updateCartItem, arg.Quantity, arg.MedicineID, arg.CartID)
	return err
}
