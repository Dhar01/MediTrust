// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: carts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getCart = `-- name: GetCart :many
SELECT
    cart.id AS cart_id,
    cart.created_at,
    ci.id,
    ci.medicine_id,
    m.name AS medicine_name,
    ci.quantity,
    m.price AS price
FROM cart
LEFT JOIN cart_item ci ON cart.id = ci.cart_id
LEFT JOIN medicines m ON ci.medicine_id = m.id
WHERE cart.user_id = $1
`

type GetCartRow struct {
	CartID       uuid.UUID
	CreatedAt    sql.NullTime
	ID           sql.NullInt32
	MedicineID   uuid.NullUUID
	MedicineName sql.NullString
	Quantity     sql.NullInt32
	Price        sql.NullInt32
}

func (q *Queries) GetCart(ctx context.Context, userID uuid.UUID) ([]GetCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartRow
	for rows.Next() {
		var i GetCartRow
		if err := rows.Scan(
			&i.CartID,
			&i.CreatedAt,
			&i.ID,
			&i.MedicineID,
			&i.MedicineName,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
