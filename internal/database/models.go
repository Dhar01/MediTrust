// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ProductType string

const (
	ProductTypeMedicine          ProductType = "medicine"
	ProductTypeMedicalInstrument ProductType = "medical_instrument"
)

func (e *ProductType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProductType(s)
	case string:
		*e = ProductType(s)
	default:
		return fmt.Errorf("unsupported scan type for ProductType: %T", src)
	}
	return nil
}

type NullProductType struct {
	ProductType ProductType
	Valid       bool // Valid is true if ProductType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProductType) Scan(value interface{}) error {
	if value == nil {
		ns.ProductType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProductType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProductType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProductType), nil
}

type Medicine struct {
	ID         uuid.UUID
	Dosage     string
	ExpiryDate pgtype.Timestamp
}

type Product struct {
	ID           uuid.UUID
	Name         string
	Manufacturer string
	Description  string
	Price        int32
	Cost         int32
	Stock        int32
	Type         ProductType
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}
