// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin_roles (
    user_id, role, created_at, updated_at
) VALUES (
    $1,
    $2,
    NOW(),
    NOW()
)
RETURNING user_id, role, created_at, updated_at
`

type CreateAdminParams struct {
	UserID uuid.UUID
	Role   string
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (AdminRole, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.UserID, arg.Role)
	var i AdminRole
	err := row.Scan(
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminByUserID = `-- name: GetAdminByUserID :one
SELECT user_id, role, created_at, updated_at FROM admin_roles
WHERE user_id = $1
`

func (q *Queries) GetAdminByUserID(ctx context.Context, userID uuid.UUID) (AdminRole, error) {
	row := q.db.QueryRowContext(ctx, getAdminByUserID, userID)
	var i AdminRole
	err := row.Scan(
		&i.UserID,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminWithPermission = `-- name: GetAdminWithPermission :many
SELECT
    admin_roles.user_id, admin_roles.role, admin_roles.created_at, admin_roles.updated_at, permissions.name
FROM admin_roles
JOIN admin_permissions ON admin_roles.user_id = admin_permissions.admin_id
JOIN permissions ON permissions.permission_id = admin_permissions.permission_id
WHERE admin_roles.user_id = $1
`

type GetAdminWithPermissionRow struct {
	UserID    uuid.UUID
	Role      string
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
}

func (q *Queries) GetAdminWithPermission(ctx context.Context, userID uuid.UUID) ([]GetAdminWithPermissionRow, error) {
	rows, err := q.db.QueryContext(ctx, getAdminWithPermission, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdminWithPermissionRow
	for rows.Next() {
		var i GetAdminWithPermissionRow
		if err := rows.Scan(
			&i.UserID,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
