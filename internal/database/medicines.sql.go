// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: medicines.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createMedicine = `-- name: CreateMedicine :one
INSERT INTO medicines (
    id, dosage, expiry_date
) VALUES (
    $1,
    $2,
    $3
)
RETURNING id, dosage, expiry_date
`

type CreateMedicineParams struct {
	ID         uuid.UUID
	Dosage     string
	ExpiryDate pgtype.Timestamp
}

func (q *Queries) CreateMedicine(ctx context.Context, arg CreateMedicineParams) (Medicine, error) {
	row := q.db.QueryRow(ctx, createMedicine, arg.ID, arg.Dosage, arg.ExpiryDate)
	var i Medicine
	err := row.Scan(&i.ID, &i.Dosage, &i.ExpiryDate)
	return i, err
}

const getFullMedicineByID = `-- name: GetFullMedicineByID :one
SELECT
    p.id, p.name, p.manufacturer, p.description, p.price,
    p.cost, p.stock, p.type, p.created_at, p.updated_at,
    m.dosage, m.expiry_date, p.created_at, p.updated_at
FROM medicines m
JOIN products p on m.id = p.id
WHERE p.id = $1
`

type GetFullMedicineByIDRow struct {
	ID           uuid.UUID
	Name         string
	Manufacturer string
	Description  string
	Price        int32
	Cost         int32
	Stock        int32
	Type         ProductType
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
	Dosage       string
	ExpiryDate   pgtype.Timestamp
	CreatedAt_2  pgtype.Timestamp
	UpdatedAt_2  pgtype.Timestamp
}

func (q *Queries) GetFullMedicineByID(ctx context.Context, id uuid.UUID) (GetFullMedicineByIDRow, error) {
	row := q.db.QueryRow(ctx, getFullMedicineByID, id)
	var i GetFullMedicineByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Manufacturer,
		&i.Description,
		&i.Price,
		&i.Cost,
		&i.Stock,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Dosage,
		&i.ExpiryDate,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getMedicineInfoByID = `-- name: GetMedicineInfoByID :one
SELECT id, dosage, expiry_date FROM medicines WHERE id = $1
`

func (q *Queries) GetMedicineInfoByID(ctx context.Context, id uuid.UUID) (Medicine, error) {
	row := q.db.QueryRow(ctx, getMedicineInfoByID, id)
	var i Medicine
	err := row.Scan(&i.ID, &i.Dosage, &i.ExpiryDate)
	return i, err
}

const updateMedicine = `-- name: UpdateMedicine :one
UPDATE medicines
SET
    dosage = $1,
    expiry_date = $2
WHERE id = $3
RETURNING id, dosage, expiry_date
`

type UpdateMedicineParams struct {
	Dosage     string
	ExpiryDate pgtype.Timestamp
	ID         uuid.UUID
}

func (q *Queries) UpdateMedicine(ctx context.Context, arg UpdateMedicineParams) (Medicine, error) {
	row := q.db.QueryRow(ctx, updateMedicine, arg.Dosage, arg.ExpiryDate, arg.ID)
	var i Medicine
	err := row.Scan(&i.ID, &i.Dosage, &i.ExpiryDate)
	return i, err
}
