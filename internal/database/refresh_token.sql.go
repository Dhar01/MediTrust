// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_token.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (
    refreshToken, user_id, expires_at, revoked_at, created_at, updated_at
) VALUES (
    $1, $2, NOW() + INTERVAL '60 days', NULL, NOW(), NOW()
)
RETURNING refreshtoken, user_id, expires_at, revoked_at, created_at, updated_at
`

type CreateRefreshTokenParams struct {
	Refreshtoken string
	UserID       uuid.UUID
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Refreshtoken, arg.UserID)
	return err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.first_name, users.last_name, users.age, users.email, users.phone, users.password_hash, users.created_at, users.updated_at FROM users
JOIN refresh_tokens ON users.id = refresh_tokens.user_id
WHERE refreshToken = $1
    AND expires_at > NOW()
    AND revoked_at IS NULL
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, refreshtoken string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, refreshtoken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Age,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens
SET
    updated_at = NOW(),
    revoked_at = NOW()
WHERE refreshToken = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, refreshtoken string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, refreshtoken)
	return err
}
