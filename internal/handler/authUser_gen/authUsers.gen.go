// Package auth_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auth_gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	googleuuid "github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Address defines model for Address.
type Address struct {
	City          *string `json:"city,omitempty"`
	Country       *string `json:"country,omitempty"`
	PostalCode    *string `json:"postal_code,omitempty"`
	StreetAddress *string `json:"street_address,omitempty"`
}

// FetchUserInfoResponse defines model for FetchUserInfoResponse.
type FetchUserInfoResponse struct {
	Address  *Address             `json:"address,omitempty"`
	Age      *int32               `json:"age,omitempty" validate:"gte=18"`
	Email    *openapi_types.Email `json:"email,omitempty"`
	IsActive *bool                `json:"is_active,omitempty"`
	Name     *FullName            `json:"name,omitempty"`
	Phone    *string              `json:"phone,omitempty"`
	Role     *string              `json:"role,omitempty"`
}

// FullName defines model for FullName.
type FullName struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
}

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	Address *Address  `json:"address,omitempty"`
	Age     *int32    `json:"age,omitempty" validate:"gte=18"`
	Name    *FullName `json:"name,omitempty"`
	Phone   *string   `json:"phone,omitempty"`
}

// UpdateUserResponse defines model for UpdateUserResponse.
type UpdateUserResponse struct {
	Address  Address             `json:"address"`
	Age      int32               `json:"age" validate:"gte=18"`
	Email    openapi_types.Email `json:"email"`
	IsActive bool                `json:"is_active"`
	Name     FullName            `json:"name"`
	Phone    string              `json:"phone"`
	Role     string              `json:"role"`
}

// User defines model for User.
type User struct {
	Address      *Address             `json:"address,omitempty"`
	Age          *int32               `json:"age,omitempty" validate:"gte=18"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	HashPassword *string              `json:"hashPassword,omitempty"`
	Id           *googleuuid.UUID     `json:"id,omitempty"`
	IsActive     *bool                `json:"is_active,omitempty"`
	Name         *FullName            `json:"name,omitempty"`
	Phone        *string              `json:"phone,omitempty"`
	Role         *string              `json:"role,omitempty"`
}

// UserID defines model for UserID.
type UserID = googleuuid.UUID

// UpdateUserInfoByIDJSONRequestBody defines body for UpdateUserInfoByID for application/json ContentType.
type UpdateUserInfoByIDJSONRequestBody = UpdateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete user data
	// (DELETE /users/{userID})
	DeleteUserByID(ctx echo.Context, userID UserID) error
	// Get user using userID
	// (GET /users/{userID})
	FetchUserInfoByID(ctx echo.Context, userID UserID) error
	// Update a user information using userID
	// (PUT /users/{userID})
	UpdateUserInfoByID(ctx echo.Context, userID UserID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteUserByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "userID", ctx.Param("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserByID(ctx, userID)
	return err
}

// FetchUserInfoByID converts echo context to params.
func (w *ServerInterfaceWrapper) FetchUserInfoByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "userID", ctx.Param("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FetchUserInfoByID(ctx, userID)
	return err
}

// UpdateUserInfoByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserInfoByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "userID", ctx.Param("userID"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUserInfoByID(ctx, userID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/users/:userID", wrapper.DeleteUserByID)
	router.GET(baseURL+"/users/:userID", wrapper.FetchUserInfoByID)
	router.PUT(baseURL+"/users/:userID", wrapper.UpdateUserInfoByID)

}

type BadRequestErrorResponse struct {
}

type InternalServerErrorResponse struct {
}

type NotFoundErrorResponse struct {
}

type UnauthorizedAccessErrorResponse struct {
}

type DeleteUserByIDRequestObject struct {
	UserID UserID `json:"userID"`
}

type DeleteUserByIDResponseObject interface {
	VisitDeleteUserByIDResponse(w http.ResponseWriter) error
}

type DeleteUserByID204Response struct {
}

func (response DeleteUserByID204Response) VisitDeleteUserByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserByID401Response = UnauthorizedAccessErrorResponse

func (response DeleteUserByID401Response) VisitDeleteUserByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type FetchUserInfoByIDRequestObject struct {
	UserID UserID `json:"userID"`
}

type FetchUserInfoByIDResponseObject interface {
	VisitFetchUserInfoByIDResponse(w http.ResponseWriter) error
}

type FetchUserInfoByID200JSONResponse FetchUserInfoResponse

func (response FetchUserInfoByID200JSONResponse) VisitFetchUserInfoByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FetchUserInfoByID400Response = BadRequestErrorResponse

func (response FetchUserInfoByID400Response) VisitFetchUserInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FetchUserInfoByID404Response = NotFoundErrorResponse

func (response FetchUserInfoByID404Response) VisitFetchUserInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type FetchUserInfoByID500Response = InternalServerErrorResponse

func (response FetchUserInfoByID500Response) VisitFetchUserInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdateUserInfoByIDRequestObject struct {
	UserID UserID `json:"userID"`
	Body   *UpdateUserInfoByIDJSONRequestBody
}

type UpdateUserInfoByIDResponseObject interface {
	VisitUpdateUserInfoByIDResponse(w http.ResponseWriter) error
}

type UpdateUserInfoByID202JSONResponse UpdateUserResponse

func (response UpdateUserInfoByID202JSONResponse) VisitUpdateUserInfoByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserInfoByID400Response = BadRequestErrorResponse

func (response UpdateUserInfoByID400Response) VisitUpdateUserInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateUserInfoByID401Response = UnauthorizedAccessErrorResponse

func (response UpdateUserInfoByID401Response) VisitUpdateUserInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdateUserInfoByID500Response = InternalServerErrorResponse

func (response UpdateUserInfoByID500Response) VisitUpdateUserInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete user data
	// (DELETE /users/{userID})
	DeleteUserByID(ctx context.Context, request DeleteUserByIDRequestObject) (DeleteUserByIDResponseObject, error)
	// Get user using userID
	// (GET /users/{userID})
	FetchUserInfoByID(ctx context.Context, request FetchUserInfoByIDRequestObject) (FetchUserInfoByIDResponseObject, error)
	// Update a user information using userID
	// (PUT /users/{userID})
	UpdateUserInfoByID(ctx context.Context, request UpdateUserInfoByIDRequestObject) (UpdateUserInfoByIDResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteUserByID operation middleware
func (sh *strictHandler) DeleteUserByID(ctx echo.Context, userID UserID) error {
	var request DeleteUserByIDRequestObject

	request.UserID = userID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserByID(ctx.Request().Context(), request.(DeleteUserByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserByIDResponseObject); ok {
		return validResponse.VisitDeleteUserByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FetchUserInfoByID operation middleware
func (sh *strictHandler) FetchUserInfoByID(ctx echo.Context, userID UserID) error {
	var request FetchUserInfoByIDRequestObject

	request.UserID = userID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FetchUserInfoByID(ctx.Request().Context(), request.(FetchUserInfoByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchUserInfoByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FetchUserInfoByIDResponseObject); ok {
		return validResponse.VisitFetchUserInfoByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUserInfoByID operation middleware
func (sh *strictHandler) UpdateUserInfoByID(ctx echo.Context, userID UserID) error {
	var request UpdateUserInfoByIDRequestObject

	request.UserID = userID

	var body UpdateUserInfoByIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserInfoByID(ctx.Request().Context(), request.(UpdateUserInfoByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserInfoByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserInfoByIDResponseObject); ok {
		return validResponse.VisitUpdateUserInfoByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXYW/bNhP+KwTffJQt2XHS1MALLEHmLm1TBE2DfQiC4CKdJbYSqZLHNG6g/z6Qkm3Z",
	"kpsO7YqtW780Iu+Od/c8R/N55LEqSiVRkuHTR16ChgIJtf+6MqjPTt1fQvIpL4EyHnAJBfIpt/VmwDV+",
	"tEJjwqekLQbcxBkW4LzmShdAfMpTpdIcrRUJDzgtSudvSAuZ8oA/DFI1aBbXhsOrKx99tTsQRak0ubhN",
	"BhtRfXJTngrK7N0wVkVYb4d+v6qqymVqSiUN+uJOIHmLHy0a+lVrpd1SgibWoiShXLln8h5ykTAhS0u8",
	"CviZJNQS8kvU96h3etVGzHgrht6sCvgbRTNlZbLDzxCQNUwqYnNn5lyuJFjKlBafMTmOYzRmh3PbkIG3",
	"5K7gGgpf7nGSaLfsQNaqRE2i7kMsaOH+xwcoytz19TSDD9ABqgp4rKwkvWV9AjLNIUGT9bmUyhDkt7FK",
	"cNNtNI6e9TkY0oh0C+t02z777ByEZJfeqOterVbU3XuMPWozpDjzTJZz9bZhQLcNrQP3NM75lP8vXM9G",
	"2HQyXLaxCjikmyXtR6vThSRMUW+RW0jaH/s1BaUYuJ6kKAf4QBoGBKk/3HMOyPOb8P+jI18VFiDyzWa4",
	"+ful+XR858F63mrznu4KcwsxifvNzOu5bYzvlMoRpLOu5+zLDZnZPH/j7BzYmZJbMEejw6j5xwNeCPka",
	"ZeomdTTqSU+rfMs/toZU4Vv5NVgvk+nAOxfa0O2yoHX8lyqTm4nt9+SVQ6/zqcKnfPuyvCodwI6SzQX0",
	"T2PjD+bFUz38b6R/npFePyau61yDVeUOnGAFahN5mWG7Dzd9fDGo/60MycBkF2DMJ6WTzXB7Y9gbjfcW",
	"p89mz83n17PLVw/Rxavfkrfpi1d2OBz28m0rxsFBhEeTKBrg+PndYDJKJgN4NjocTCaHhwcHk0nDk7/T",
	"W/An/x10ryiMrRa0uFw/AE8QNOpj6w595Hf+a7YE5eXv73jzXPS1+931WRlRyf0TWsi56r4/jy/O2Fxp",
	"5ujJCpCQYoGSmJAMJFMyFxJZmYEuIF7wgOcixubKbvA7P3vnCidBvlw3rux8Hej44owH/B61qQ+MhtFw",
	"1J2qQiRJjp9Au/G+5uetz5uOsSdSAWUpZD2Fnh27aFNz0LVAlSihFHzK94fRMGr45iOErgEmfKy1UVU3",
	"KkfCbstO/TqjDFmu0hSdzvD9c0Pn7ihwhk59NSFcS04Wfg7W28kqUmu7LeKu+1m7NgkbkVfdbOmjcTTp",
	"USnWi4u5zfMFq/NKfNZ9N8UkGu2amtVJ4S6N02axL6PN3+sbl66xRQFOjiyb6emXAHnx4q/Wa39jGn5T",
	"BTxF6hbk1QGD2tWR2w2EUA4KIVO2ErmbiMzbmqIXlFmPxffCJfKyTUlC6SuCssxF7M8O3xtX1mNLhH/x",
	"0urVRn7QN9t0aRtR6VCNnkZ1W1x7v8nTfpsiuQr4wdec1ifM/xR/XiDVDNhCvUui0vaQqH6MPsUif0N2",
	"5z1gBB/QsBI0CciZ9cE6lLOrB+9Ozl31mXwD6Tx+JypZfDe+dZVPtfnoc7/AVYfw478kgd1s78Lo3RLW",
	"vv6+bRa+5Wb8UVPxdbTuGZP6FHdqTTqr8+YRMQ3DXMWQZ8rQ9Cg6ikIoRXg/4tVN9UcAAAD//xRjgayM",
	"FAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
