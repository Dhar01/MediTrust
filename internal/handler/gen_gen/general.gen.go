// Package general_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package general_gen

import (
	"context"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// wipe out the database
	// (POST /reset)
	WipeOutDatabase(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// WipeOutDatabase converts echo context to params.
func (w *ServerInterfaceWrapper) WipeOutDatabase(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WipeOutDatabase(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/reset", wrapper.WipeOutDatabase)

}

type InternalServerErrorResponse struct {
}

type NotFoundErrorResponse struct {
}

type UnauthorizedAccessErrorResponse struct {
}

type WipeOutDatabaseRequestObject struct {
}

type WipeOutDatabaseResponseObject interface {
	VisitWipeOutDatabaseResponse(w http.ResponseWriter) error
}

type WipeOutDatabase200Response struct {
}

func (response WipeOutDatabase200Response) VisitWipeOutDatabaseResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type WipeOutDatabase401Response = UnauthorizedAccessErrorResponse

func (response WipeOutDatabase401Response) VisitWipeOutDatabaseResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type WipeOutDatabase500Response = InternalServerErrorResponse

func (response WipeOutDatabase500Response) VisitWipeOutDatabaseResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// wipe out the database
	// (POST /reset)
	WipeOutDatabase(ctx context.Context, request WipeOutDatabaseRequestObject) (WipeOutDatabaseResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// WipeOutDatabase operation middleware
func (sh *strictHandler) WipeOutDatabase(ctx echo.Context) error {
	var request WipeOutDatabaseRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WipeOutDatabase(ctx.Request().Context(), request.(WipeOutDatabaseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WipeOutDatabase")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WipeOutDatabaseResponseObject); ok {
		return validResponse.VisitWipeOutDatabaseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
