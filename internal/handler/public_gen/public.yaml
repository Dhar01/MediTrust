openapi: 3.0.0

info:
    title: User Auth Management API
    description: API for user auth management in an online pharmacy
    version: 0.0.1
    license:
        name: MIT
    x-oapi-codegen-middlewares:
        - Middlewares
    x-oapi-codegen-type-mappings:
        uuid: github.com/google/uuid.UUID

servers:
    - url: http://localhost:8080/api/v1


paths:

    /users/register:

        # POST /api/v1/users/register
        post:
            summary: Register a new user
            description: Register a new user with email and password
            operationId: registerUserHandler
            tags:
                - public
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RegisterRequest'
            responses:
                "201":
                    description: User created Successfully. Please verify.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RegisterResponse'
                "400":
                    $ref: '#/components/responses/BadRequestError'
                "409":
                    $ref: '#/components/responses/ConflictError'
                "500":
                    $ref: '#/components/responses/InternalServerError'


    /users/verify:

        # GET /api/v1/users/verify?token=%s
        get:
            summary: Verify a user with a confirmation token via email with verification token
            description: After sign up, users go through verification process via token
            operationID: verifyUserHandler
            tags:
                - public
            parameters:
                - in: query
                  name: token
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: successfully verified
                "401":
                    $ref: '#/components/responses/UnauthorizedAccessError'
                "500":
                    $ref: '#/components/responses/InternalServerError'

    /users/login:

        # POST /api/v1/auth/login
        post:
            summary: Log in a user
            description: Log in a user using email and password. After successfully login, client will receive access token and refresh token
            operationID: logInUserHandler
            tags:
                - public
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
            responses:
                "200":
                    description: Successful login
                    headers:
                        Set-Cookie:
                            description: Refresh token cookie
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
                "400":
                    $ref: '#/components/responses/BadRequestError'
                "401":
                    $ref: '#/components/responses/UnauthorizedAccessError'
                "404":
                    $ref: '#/components/responses/NotFoundError'
                "500":
                    $ref: '#/components/responses/InternalServerError'

    /users/forget-password:

        # POST /api/v1/users/forget-password
        post:
            summary: Start password reset flow
            description: if a user forget his/her password, they can request for password reset
            operationID: forgetPasswordHandler
            tags:
                - public
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ForgetPasswordReq'
            responses:
                "202":
                    description: status accepted, please check email
                    type: string
                "404":
                    $ref: '#/components/responses/NotFoundError'
                "500":
                    $ref: '#/components/responses/InternalServerError'

    /users/reset-password:

        # PUT /api/v1/users/reset-password?token=%s
        put:
            summary: reset password completely
            description: if a user request for password reset, can update via this endpoint
            operationID: resetPasswordHandler
            tags:
                - public
            parameters:
                - in: query
                  name: token
                  required: true
                  schema:
                    type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ResetPassword'
            responses:
                "202":
                    description: password updated
                    type: string
                "400":
                    $ref: '#/components/responses/BadRequestError'
                "401":
                    $ref: '#/components/responses/UnauthorizedAccessError'
                "500":
                    $ref: '#/components/responses/InternalServerError'

components:

    securitySchemes:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    responses:
        InternalServerError:
            description: Internal server error

        BadRequestError:
            description: Invalid input, bad request

        UnauthorizedAccessError:
            description: Unauthorized access

        NotFoundError:
            description: status not found

        ConflictError:
            description: conflict with the server state

    schemas:

        # Cookie:
        #     type: object
        #     properties:
        #         name:
        #             type: string
        #             example: "refresh_token"
        #         value:
        #             type: string
        #         HttpOnly:
        #             type: string

        # ==================== AUTH ========================

        RegisterRequest:
            type: object
            required:
                - email
                - password
            properties:
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                password:
                    type: string
                    format: password
                    minLength: 8
                    example: "SecureP@ss123"

        RegisterResponse:
            type: object
            properties:
                user_id:
                    type: string
                    format: googleuuid
                    example: '550e8400-e29b-41d4-a716-446655440000'
                    x-go-type: googleuuid.UUID
                    x-go-type-import:
                        path: github.com/google/uuid
                        name: googleuuid

        LoginRequest:
            type: object
            properties:
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                password:
                    type: string
                    format: password
                    minLength: 8
                    example: 'SecureP@ss123'
            required:
                - email
                - password

        LoginResponse:
            type: object
            required:
                - access_token
            properties:
                access_token:
                    type: string
                    description: JWT access token

        ForgetPasswordReq:
            type: object
            required:
                - email
            properties:
                email:
                    type: string
                    format: email
                    example: 'user@example.com'

        ResetPassword:
            type: object
            required:
                - password
            properties:
                password:
                    type: string
                    format: password
                    minLength: 8
                    example: 'SecureP@ss123'
