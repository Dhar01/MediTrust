// Package med_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package med_gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	googleuuid "github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateMedicineDTO defines model for CreateMedicineDTO.
type CreateMedicineDTO struct {
	Description  string `json:"description"`
	Dosage       string `json:"dosage"`
	Manufacturer string `json:"manufacturer"`
	Name         string `json:"name"`
	Price        int32  `json:"price" validate:"gte=0"`
	Stock        int32  `json:"stock" validate:"gte=0"`
}

// Medicine defines model for Medicine.
type Medicine struct {
	Description  *string          `json:"description,omitempty"`
	Dosage       *string          `json:"dosage,omitempty"`
	Id           *googleuuid.UUID `json:"id,omitempty"`
	Manufacturer *string          `json:"manufacturer,omitempty"`
	Name         *string          `json:"name,omitempty"`
	Price        *int32           `json:"price,omitempty" validate:"gte=0"`
	Stock        *int32           `json:"stock,omitempty" validate:"gte=0"`
}

// UpdateMedicineDTO defines model for UpdateMedicineDTO.
type UpdateMedicineDTO struct {
	Description  *string `json:"description,omitempty"`
	Dosage       *string `json:"dosage,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
	Price        *int32  `json:"price,omitempty" validate:"gte=0"`
	Stock        *int32  `json:"stock,omitempty" validate:"gte=0"`
}

// MedicineID defines model for MedicineID.
type MedicineID = googleuuid.UUID

// CreateNewMedicineJSONRequestBody defines body for CreateNewMedicine for application/json ContentType.
type CreateNewMedicineJSONRequestBody = CreateMedicineDTO

// UpdateMedicineInfoByIDJSONRequestBody defines body for UpdateMedicineInfoByID for application/json ContentType.
type UpdateMedicineInfoByIDJSONRequestBody = UpdateMedicineDTO

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all medicines
	// (GET /medicines)
	FetchMedicineList(ctx echo.Context) error
	// Create a new medicine (admin only)
	// (POST /medicines)
	CreateNewMedicine(ctx echo.Context) error
	// Delete a medicine by ID (admin only)
	// (DELETE /medicines/{medicineID})
	DeleteMedicineByID(ctx echo.Context, medicineID MedicineID) error
	// Get a medicine by ID
	// (GET /medicines/{medicineID})
	FetchMedicineByID(ctx echo.Context, medicineID MedicineID) error
	// Update a medicine by ID (admin only)
	// (PUT /medicines/{medicineID})
	UpdateMedicineInfoByID(ctx echo.Context, medicineID MedicineID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FetchMedicineList converts echo context to params.
func (w *ServerInterfaceWrapper) FetchMedicineList(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FetchMedicineList(ctx)
	return err
}

// CreateNewMedicine converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewMedicine(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateNewMedicine(ctx)
	return err
}

// DeleteMedicineByID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMedicineByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", ctx.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medicineID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMedicineByID(ctx, medicineID)
	return err
}

// FetchMedicineByID converts echo context to params.
func (w *ServerInterfaceWrapper) FetchMedicineByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", ctx.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medicineID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FetchMedicineByID(ctx, medicineID)
	return err
}

// UpdateMedicineInfoByID converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMedicineInfoByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", ctx.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter medicineID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMedicineInfoByID(ctx, medicineID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/medicines", wrapper.FetchMedicineList)
	router.POST(baseURL+"/medicines", wrapper.CreateNewMedicine)
	router.DELETE(baseURL+"/medicines/:medicineID", wrapper.DeleteMedicineByID)
	router.GET(baseURL+"/medicines/:medicineID", wrapper.FetchMedicineByID)
	router.PUT(baseURL+"/medicines/:medicineID", wrapper.UpdateMedicineInfoByID)

}

type BadRequestErrorResponse struct {
}

type InternalServerErrorResponse struct {
}

type NotFoundErrorResponse struct {
}

type FetchMedicineListRequestObject struct {
}

type FetchMedicineListResponseObject interface {
	VisitFetchMedicineListResponse(w http.ResponseWriter) error
}

type FetchMedicineList200JSONResponse []Medicine

func (response FetchMedicineList200JSONResponse) VisitFetchMedicineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FetchMedicineList500Response = InternalServerErrorResponse

func (response FetchMedicineList500Response) VisitFetchMedicineListResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateNewMedicineRequestObject struct {
	Body *CreateNewMedicineJSONRequestBody
}

type CreateNewMedicineResponseObject interface {
	VisitCreateNewMedicineResponse(w http.ResponseWriter) error
}

type CreateNewMedicine201JSONResponse Medicine

func (response CreateNewMedicine201JSONResponse) VisitCreateNewMedicineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewMedicine400Response = BadRequestErrorResponse

func (response CreateNewMedicine400Response) VisitCreateNewMedicineResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateNewMedicine500Response = InternalServerErrorResponse

func (response CreateNewMedicine500Response) VisitCreateNewMedicineResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteMedicineByIDRequestObject struct {
	MedicineID MedicineID `json:"medicineID"`
}

type DeleteMedicineByIDResponseObject interface {
	VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error
}

type DeleteMedicineByID204Response struct {
}

func (response DeleteMedicineByID204Response) VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMedicineByID400Response = BadRequestErrorResponse

func (response DeleteMedicineByID400Response) VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteMedicineByID500Response = InternalServerErrorResponse

func (response DeleteMedicineByID500Response) VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FetchMedicineByIDRequestObject struct {
	MedicineID MedicineID `json:"medicineID"`
}

type FetchMedicineByIDResponseObject interface {
	VisitFetchMedicineByIDResponse(w http.ResponseWriter) error
}

type FetchMedicineByID200JSONResponse Medicine

func (response FetchMedicineByID200JSONResponse) VisitFetchMedicineByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FetchMedicineByID400Response = BadRequestErrorResponse

func (response FetchMedicineByID400Response) VisitFetchMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FetchMedicineByID500Response = InternalServerErrorResponse

func (response FetchMedicineByID500Response) VisitFetchMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdateMedicineInfoByIDRequestObject struct {
	MedicineID MedicineID `json:"medicineID"`
	Body       *UpdateMedicineInfoByIDJSONRequestBody
}

type UpdateMedicineInfoByIDResponseObject interface {
	VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error
}

type UpdateMedicineInfoByID202JSONResponse Medicine

func (response UpdateMedicineInfoByID202JSONResponse) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMedicineInfoByID400Response = BadRequestErrorResponse

func (response UpdateMedicineInfoByID400Response) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateMedicineInfoByID404Response = NotFoundErrorResponse

func (response UpdateMedicineInfoByID404Response) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateMedicineInfoByID500Response = InternalServerErrorResponse

func (response UpdateMedicineInfoByID500Response) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all medicines
	// (GET /medicines)
	FetchMedicineList(ctx context.Context, request FetchMedicineListRequestObject) (FetchMedicineListResponseObject, error)
	// Create a new medicine (admin only)
	// (POST /medicines)
	CreateNewMedicine(ctx context.Context, request CreateNewMedicineRequestObject) (CreateNewMedicineResponseObject, error)
	// Delete a medicine by ID (admin only)
	// (DELETE /medicines/{medicineID})
	DeleteMedicineByID(ctx context.Context, request DeleteMedicineByIDRequestObject) (DeleteMedicineByIDResponseObject, error)
	// Get a medicine by ID
	// (GET /medicines/{medicineID})
	FetchMedicineByID(ctx context.Context, request FetchMedicineByIDRequestObject) (FetchMedicineByIDResponseObject, error)
	// Update a medicine by ID (admin only)
	// (PUT /medicines/{medicineID})
	UpdateMedicineInfoByID(ctx context.Context, request UpdateMedicineInfoByIDRequestObject) (UpdateMedicineInfoByIDResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FetchMedicineList operation middleware
func (sh *strictHandler) FetchMedicineList(ctx echo.Context) error {
	var request FetchMedicineListRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FetchMedicineList(ctx.Request().Context(), request.(FetchMedicineListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchMedicineList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FetchMedicineListResponseObject); ok {
		return validResponse.VisitFetchMedicineListResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateNewMedicine operation middleware
func (sh *strictHandler) CreateNewMedicine(ctx echo.Context) error {
	var request CreateNewMedicineRequestObject

	var body CreateNewMedicineJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewMedicine(ctx.Request().Context(), request.(CreateNewMedicineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewMedicine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateNewMedicineResponseObject); ok {
		return validResponse.VisitCreateNewMedicineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMedicineByID operation middleware
func (sh *strictHandler) DeleteMedicineByID(ctx echo.Context, medicineID MedicineID) error {
	var request DeleteMedicineByIDRequestObject

	request.MedicineID = medicineID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMedicineByID(ctx.Request().Context(), request.(DeleteMedicineByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMedicineByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMedicineByIDResponseObject); ok {
		return validResponse.VisitDeleteMedicineByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FetchMedicineByID operation middleware
func (sh *strictHandler) FetchMedicineByID(ctx echo.Context, medicineID MedicineID) error {
	var request FetchMedicineByIDRequestObject

	request.MedicineID = medicineID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FetchMedicineByID(ctx.Request().Context(), request.(FetchMedicineByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchMedicineByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FetchMedicineByIDResponseObject); ok {
		return validResponse.VisitFetchMedicineByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateMedicineInfoByID operation middleware
func (sh *strictHandler) UpdateMedicineInfoByID(ctx echo.Context, medicineID MedicineID) error {
	var request UpdateMedicineInfoByIDRequestObject

	request.MedicineID = medicineID

	var body UpdateMedicineInfoByIDJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMedicineInfoByID(ctx.Request().Context(), request.(UpdateMedicineInfoByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMedicineInfoByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateMedicineInfoByIDResponseObject); ok {
		return validResponse.VisitUpdateMedicineInfoByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/bNhf+KwTf92IDZEtJ7a4TsItmaQcP6QfWFrsIfHFMHctsJVIlj9IKgf77QNKW",
	"LMvJui1NNqBXhqTD8/U854O+5kKXlVaoyPL0mldgoERC459eYCaFVLg4d09S8ZRXQBsecQUl8pSXvUDE",
	"DX6spcGMp2RqjLgVGyzBnVxrUwLxlOda5wXWtcx4xKmpnA5LRqqcR/zzJNeT7ctecPrundfefZ3IstKG",
	"nN6tFwOt3sGU55I29WoqdBmHz7H/3rZt6zy1lVYWfZBnkP2GH2u09MwYbdyrDK0wsiKpXchnkDETJCIm",
	"1RUUMmNSVTXxNuILRWgUFG/QXKG5QcVOiFkvxdCLtRF/qem5rlV2w7mXmpj/zp3bIaHe6Z8NAuEOn/O3",
	"rzx4RldoSIa4BpquOX6GsipcusidLVER02uWg8u/GMHRRjzTFnIcnj1NyvyYbAmqXoOg2qAZnnhmP0CD",
	"a/Z6A6YEgTVJAYVlF5RNj2kKmO5ruNAWBcnimHRlpBiKzzspqQhzNAfMkooenfp3Gio5ETrDHNUEP5OB",
	"CUHuc+cxBvLkIvwpCeknLT4MbJ0kX8lYu19NlyEnu2CjAbI7tzq4DrBYdh7q1XsUnrI72jwwZ2Q2lJvP",
	"E3wyS5IJnv64msxOstkEfjh5PJnNHj+ez2ezJEkSHv2rmsk34t898Ud0fVdl33rdg0M+vzfEnXkUtZHU",
	"vHETbzumEQyap7UryGu+8k/Pd63g19/f8u18dJrC1z6HG6IqmJJqrcdj9unrBVtrw0pQkEuVs91eY5lU",
	"DBTTqpAKWRVwbXjECylQWdxrHC8Wbx1KJMkjueMre/p6wSN+hcYGY8k0mZ6ME1XKLCvwExgX7iV/sfe4",
	"HAn71lVCVUkVEuv70U2NKnQ9F76uUEElecofTZNpsu1wXkPcxeyecqRxmp4jiQ0DVkjr6wmuQBawKrDP",
	"F/c2DLgTi2x3ZpeLC2mJH6xfp0nifoRWhMobhaoqpPAq4vc2VHS/S0rC0h/8v8E1T/n/4n6DjbcbUtxN",
	"uJ5dYAw0gQTDqC620fQxtBGfB6+O2ei8j4+tfp69dVmCaXjKf0FiUBSD/IRauOT9u6Urbm2PZDyseQyY",
	"wk+dEoaKTDNlr1TROHJCVkrFBChWoXHTkdFGWgbCKZmOEAk6X+KnLklh2UBLZzpr/hIYt2EwXlEP9hp3",
	"S2hHbDi5Mwd6EoxB76pTeC8zZmsh0Np1XRSNI8DsSwhweHX4x8TZtj2eXg4b3uWyXe7z6jgvvgtM0Kpo",
	"vj9CNL50Nvo6j6/761sbuFcg4ZiFBkt95ax1ltZGO5Yhs6QNjih27hXtcnzW+J1r/2p5eTxDvUi8d/V0",
	"oR+QZDZ2skM0RPFfQzSkbD/Hq4Ytzv8M09A8bunWbuC5ISm18i27119bN+k8NLe07K8AXnIvFf4mwP9w",
	"yA+HwAGuN8+B+giUYQO+BctVwyTZY2AOl+eFWuu7QfTu58V4zf+ieXF6L2zqq8Z7eXfdZRZ62e3nhv8S",
	"3VtP2tLu7/SkYMfZDfSqTbHdw9M4LrSAYqMtpU+SJ0kMlYyvTni7bP8IAAD//26xXR+OFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
