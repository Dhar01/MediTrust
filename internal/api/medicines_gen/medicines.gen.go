// Package medicines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package medicines

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
)

// CreateMedicineDTO defines model for CreateMedicineDTO.
type CreateMedicineDTO struct {
	Description  string `json:"description"`
	Dosage       string `json:"dosage"`
	Manufacturer string `json:"manufacturer"`
	Name         string `json:"name"`
	Price        int32  `json:"price" validate:"gte=0"`
	Stock        int32  `json:"stock" validate:"gte=0"`
}

// Medicine defines model for Medicine.
type Medicine struct {
	Description  *string          `json:"description,omitempty"`
	Dosage       *string          `json:"dosage,omitempty"`
	Id           *googleuuid.UUID `json:"id,omitempty"`
	Manufacturer *string          `json:"manufacturer,omitempty"`
	Name         *string          `json:"name,omitempty"`
	Price        *int32           `json:"price,omitempty" validate:"gte=0"`
	Stock        *int32           `json:"stock,omitempty" validate:"gte=0"`
}

// UpdateMedicineDTO defines model for UpdateMedicineDTO.
type UpdateMedicineDTO struct {
	Description  *string `json:"description,omitempty"`
	Dosage       *string `json:"dosage,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
	Price        *int32  `json:"price,omitempty" validate:"gte=0"`
	Stock        *int32  `json:"stock,omitempty" validate:"gte=0"`
}

// MedicineID defines model for MedicineID.
type MedicineID = googleuuid.UUID

// CreateNewMedicineJSONRequestBody defines body for CreateNewMedicine for application/json ContentType.
type CreateNewMedicineJSONRequestBody = CreateMedicineDTO

// UpdateMedicineInfoByIDJSONRequestBody defines body for UpdateMedicineInfoByID for application/json ContentType.
type UpdateMedicineInfoByIDJSONRequestBody = UpdateMedicineDTO

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all medicines
	// (GET /medicines)
	FetchMedicineList(c *gin.Context)
	// Create a new medicine (admin only)
	// (POST /medicines)
	CreateNewMedicine(c *gin.Context)
	// Delete a medicine by ID (admin only)
	// (DELETE /medicines/{medicineID})
	DeleteMedicineByID(c *gin.Context, medicineID MedicineID)
	// Get a medicine by ID
	// (GET /medicines/{medicineID})
	FetchMedicineByID(c *gin.Context, medicineID MedicineID)
	// Update a medicine by ID (admin only)
	// (PUT /medicines/{medicineID})
	UpdateMedicineInfoByID(c *gin.Context, medicineID MedicineID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FetchMedicineList operation middleware
func (siw *ServerInterfaceWrapper) FetchMedicineList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchMedicineList(c)
}

// CreateNewMedicine operation middleware
func (siw *ServerInterfaceWrapper) CreateNewMedicine(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNewMedicine(c)
}

// DeleteMedicineByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMedicineByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", c.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicineID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMedicineByID(c, medicineID)
}

// FetchMedicineByID operation middleware
func (siw *ServerInterfaceWrapper) FetchMedicineByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", c.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicineID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchMedicineByID(c, medicineID)
}

// UpdateMedicineInfoByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMedicineInfoByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", c.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicineID: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMedicineInfoByID(c, medicineID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/medicines", wrapper.FetchMedicineList)
	router.POST(options.BaseURL+"/medicines", wrapper.CreateNewMedicine)
	router.DELETE(options.BaseURL+"/medicines/:medicineID", wrapper.DeleteMedicineByID)
	router.GET(options.BaseURL+"/medicines/:medicineID", wrapper.FetchMedicineByID)
	router.PUT(options.BaseURL+"/medicines/:medicineID", wrapper.UpdateMedicineInfoByID)
}
