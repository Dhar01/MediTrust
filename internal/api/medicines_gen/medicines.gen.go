// Package medicines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package medicines

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateMedicineDTO defines model for CreateMedicineDTO.
type CreateMedicineDTO struct {
	Description  string `json:"description"`
	Dosage       string `json:"dosage"`
	Manufacturer string `json:"manufacturer"`
	Name         string `json:"name"`
	Price        int32  `json:"price" validate:"gte=0"`
	Stock        int32  `json:"stock" validate:"gte=0"`
}

// Medicine defines model for Medicine.
type Medicine struct {
	Description  *string          `json:"description,omitempty"`
	Dosage       *string          `json:"dosage,omitempty"`
	Id           *googleuuid.UUID `json:"id,omitempty"`
	Manufacturer *string          `json:"manufacturer,omitempty"`
	Name         *string          `json:"name,omitempty"`
	Price        *int32           `json:"price,omitempty" validate:"gte=0"`
	Stock        *int32           `json:"stock,omitempty" validate:"gte=0"`
}

// UpdateMedicineDTO defines model for UpdateMedicineDTO.
type UpdateMedicineDTO struct {
	Description  *string `json:"description,omitempty"`
	Dosage       *string `json:"dosage,omitempty"`
	Manufacturer *string `json:"manufacturer,omitempty"`
	Name         *string `json:"name,omitempty"`
	Price        *int32  `json:"price,omitempty" validate:"gte=0"`
	Stock        *int32  `json:"stock,omitempty" validate:"gte=0"`
}

// MedicineID defines model for MedicineID.
type MedicineID = googleuuid.UUID

// CreateNewMedicineJSONRequestBody defines body for CreateNewMedicine for application/json ContentType.
type CreateNewMedicineJSONRequestBody = CreateMedicineDTO

// UpdateMedicineInfoByIDJSONRequestBody defines body for UpdateMedicineInfoByID for application/json ContentType.
type UpdateMedicineInfoByIDJSONRequestBody = UpdateMedicineDTO

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all medicines
	// (GET /medicines)
	FetchMedicineList(c *gin.Context)
	// Create a new medicine (admin only)
	// (POST /medicines)
	CreateNewMedicine(c *gin.Context)
	// Delete a medicine by ID (admin only)
	// (DELETE /medicines/{medicineID})
	DeleteMedicineByID(c *gin.Context, medicineID MedicineID)
	// Get a medicine by ID
	// (GET /medicines/{medicineID})
	FetchMedicineByID(c *gin.Context, medicineID MedicineID)
	// Update a medicine by ID (admin only)
	// (PUT /medicines/{medicineID})
	UpdateMedicineInfoByID(c *gin.Context, medicineID MedicineID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FetchMedicineList operation middleware
func (siw *ServerInterfaceWrapper) FetchMedicineList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchMedicineList(c)
}

// CreateNewMedicine operation middleware
func (siw *ServerInterfaceWrapper) CreateNewMedicine(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNewMedicine(c)
}

// DeleteMedicineByID operation middleware
func (siw *ServerInterfaceWrapper) DeleteMedicineByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", c.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicineID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteMedicineByID(c, medicineID)
}

// FetchMedicineByID operation middleware
func (siw *ServerInterfaceWrapper) FetchMedicineByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", c.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicineID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchMedicineByID(c, medicineID)
}

// UpdateMedicineInfoByID operation middleware
func (siw *ServerInterfaceWrapper) UpdateMedicineInfoByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "medicineID" -------------
	var medicineID MedicineID

	err = runtime.BindStyledParameterWithOptions("simple", "medicineID", c.Param("medicineID"), &medicineID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter medicineID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateMedicineInfoByID(c, medicineID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/medicines", wrapper.FetchMedicineList)
	router.POST(options.BaseURL+"/medicines", wrapper.CreateNewMedicine)
	router.DELETE(options.BaseURL+"/medicines/:medicineID", wrapper.DeleteMedicineByID)
	router.GET(options.BaseURL+"/medicines/:medicineID", wrapper.FetchMedicineByID)
	router.PUT(options.BaseURL+"/medicines/:medicineID", wrapper.UpdateMedicineInfoByID)
}

type InternalServerErrorResponse struct {
}

type InvalidInputResponse struct {
}

type FetchMedicineListRequestObject struct {
}

type FetchMedicineListResponseObject interface {
	VisitFetchMedicineListResponse(w http.ResponseWriter) error
}

type FetchMedicineList200JSONResponse []Medicine

func (response FetchMedicineList200JSONResponse) VisitFetchMedicineListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FetchMedicineList500Response = InternalServerErrorResponse

func (response FetchMedicineList500Response) VisitFetchMedicineListResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type CreateNewMedicineRequestObject struct {
	Body *CreateNewMedicineJSONRequestBody
}

type CreateNewMedicineResponseObject interface {
	VisitCreateNewMedicineResponse(w http.ResponseWriter) error
}

type CreateNewMedicine201JSONResponse Medicine

func (response CreateNewMedicine201JSONResponse) VisitCreateNewMedicineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateNewMedicine400Response = InvalidInputResponse

func (response CreateNewMedicine400Response) VisitCreateNewMedicineResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateNewMedicine500Response = InternalServerErrorResponse

func (response CreateNewMedicine500Response) VisitCreateNewMedicineResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type DeleteMedicineByIDRequestObject struct {
	MedicineID MedicineID `json:"medicineID"`
}

type DeleteMedicineByIDResponseObject interface {
	VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error
}

type DeleteMedicineByID204Response struct {
}

func (response DeleteMedicineByID204Response) VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteMedicineByID400Response = InvalidInputResponse

func (response DeleteMedicineByID400Response) VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteMedicineByID500Response = InternalServerErrorResponse

func (response DeleteMedicineByID500Response) VisitDeleteMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FetchMedicineByIDRequestObject struct {
	MedicineID MedicineID `json:"medicineID"`
}

type FetchMedicineByIDResponseObject interface {
	VisitFetchMedicineByIDResponse(w http.ResponseWriter) error
}

type FetchMedicineByID200JSONResponse Medicine

func (response FetchMedicineByID200JSONResponse) VisitFetchMedicineByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FetchMedicineByID400Response = InvalidInputResponse

func (response FetchMedicineByID400Response) VisitFetchMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type FetchMedicineByID500Response = InternalServerErrorResponse

func (response FetchMedicineByID500Response) VisitFetchMedicineByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdateMedicineInfoByIDRequestObject struct {
	MedicineID MedicineID `json:"medicineID"`
	Body       *UpdateMedicineInfoByIDJSONRequestBody
}

type UpdateMedicineInfoByIDResponseObject interface {
	VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error
}

type UpdateMedicineInfoByID202JSONResponse Medicine

func (response UpdateMedicineInfoByID202JSONResponse) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMedicineInfoByID400Response = InvalidInputResponse

func (response UpdateMedicineInfoByID400Response) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdateMedicineInfoByID500Response = InternalServerErrorResponse

func (response UpdateMedicineInfoByID500Response) VisitUpdateMedicineInfoByIDResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all medicines
	// (GET /medicines)
	FetchMedicineList(ctx context.Context, request FetchMedicineListRequestObject) (FetchMedicineListResponseObject, error)
	// Create a new medicine (admin only)
	// (POST /medicines)
	CreateNewMedicine(ctx context.Context, request CreateNewMedicineRequestObject) (CreateNewMedicineResponseObject, error)
	// Delete a medicine by ID (admin only)
	// (DELETE /medicines/{medicineID})
	DeleteMedicineByID(ctx context.Context, request DeleteMedicineByIDRequestObject) (DeleteMedicineByIDResponseObject, error)
	// Get a medicine by ID
	// (GET /medicines/{medicineID})
	FetchMedicineByID(ctx context.Context, request FetchMedicineByIDRequestObject) (FetchMedicineByIDResponseObject, error)
	// Update a medicine by ID (admin only)
	// (PUT /medicines/{medicineID})
	UpdateMedicineInfoByID(ctx context.Context, request UpdateMedicineInfoByIDRequestObject) (UpdateMedicineInfoByIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FetchMedicineList operation middleware
func (sh *strictHandler) FetchMedicineList(ctx *gin.Context) {
	var request FetchMedicineListRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FetchMedicineList(ctx, request.(FetchMedicineListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchMedicineList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(FetchMedicineListResponseObject); ok {
		if err := validResponse.VisitFetchMedicineListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateNewMedicine operation middleware
func (sh *strictHandler) CreateNewMedicine(ctx *gin.Context) {
	var request CreateNewMedicineRequestObject

	var body CreateNewMedicineJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateNewMedicine(ctx, request.(CreateNewMedicineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateNewMedicine")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateNewMedicineResponseObject); ok {
		if err := validResponse.VisitCreateNewMedicineResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteMedicineByID operation middleware
func (sh *strictHandler) DeleteMedicineByID(ctx *gin.Context, medicineID MedicineID) {
	var request DeleteMedicineByIDRequestObject

	request.MedicineID = medicineID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMedicineByID(ctx, request.(DeleteMedicineByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMedicineByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteMedicineByIDResponseObject); ok {
		if err := validResponse.VisitDeleteMedicineByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// FetchMedicineByID operation middleware
func (sh *strictHandler) FetchMedicineByID(ctx *gin.Context, medicineID MedicineID) {
	var request FetchMedicineByIDRequestObject

	request.MedicineID = medicineID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FetchMedicineByID(ctx, request.(FetchMedicineByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchMedicineByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(FetchMedicineByIDResponseObject); ok {
		if err := validResponse.VisitFetchMedicineByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateMedicineInfoByID operation middleware
func (sh *strictHandler) UpdateMedicineInfoByID(ctx *gin.Context, medicineID MedicineID) {
	var request UpdateMedicineInfoByIDRequestObject

	request.MedicineID = medicineID

	var body UpdateMedicineInfoByIDJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMedicineInfoByID(ctx, request.(UpdateMedicineInfoByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMedicineInfoByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateMedicineInfoByIDResponseObject); ok {
		if err := validResponse.VisitUpdateMedicineInfoByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bthf9KgR/v4cNkC05tbtOwB6apR08JGuAJNiD4Ydr6lpmK5EaSTkRAn33gaQt",
	"WZaaZVuarECfAoqX9885h5fXuadM5oUUKIym8T0tQEGOBpVbXWDCGRc4P7MrLmhMCzAbGlABOdKY5q1B",
	"QBX+UXKFCY2NKjGgmm0wB3tyLVUOhsY0lTLNsCx5QgNqqsL60EZxkdKA3o1SOdp9bA3HNzfOe7M74nkh",
	"lbF+d1l0vLoEY5pysylXYybz0G+Hbr+u69pmqgspNLoi58KgEpBdodqieqeUVPZzgpopXhgubdl7I6Kd",
	"FUFnVgd0LraQ8WQuitIMHXO7hLttG9qD4gL/rBAM7jE+u/7gCFCyQGW4z63j7Z7iHeRFZks29myOwhC5",
	"JilYDFkP0jqgidSQYvfsSZSnQ7Y5iHINzJQKVffEO/0JKlyTyw2oHBiWhjPINDk3yXjIk+fl0MO51MgM",
	"z4asC8VZ13zWWHFhMEV1pA4uzKsT901CwUdMJpiiGOGdUTAykDrsHPJgnEAM/hR5+I1knzqxJtEXClYf",
	"3oiFx2RfbNBhdp9WQ9cRF8smQ7n6iMxY0PayeWHN8KRrN5tF+GYaRSM8+XE1mk6S6Qh+mLweTaevX89m",
	"02kURREN/lMN4Zvwn174PbneFMm3XvfilM+ejXEbHlmpuKmu7IvnKT5FUKjelvZC3tOVW73ft4Jff7+m",
	"u/fRevK7LYYbYwofiou17D+1by/nZC0VyUFAykVK9rOJJlwQEESKjAskhee1ogHNOEOh8aBxXMyvLUuG",
	"G8fkXq/k7eWcBnSLSvtg0TgaT/pA5TxJMrwFZctd0IuD5bJn7FpXDkXBhQfW9aPPNSrf9Wz5skABBacx",
	"fTWOxtGuwzkPYVOzXaU4MJG8R8M2BEjGtbtPsAWewSrDFi/qYiiwJ+bJ/swei3OuDT0aoU6iyP5hUhgU",
	"LigURcaZcxF+1P5Gt/MgN5i7g/9XuKYx/V/YTqHhbkIKmxeuVRcoBZUXQbeq8101bQ11QGc+q6EYTfbh",
	"0PTn1FvmOaiKxvQXNASyrIOPvwsL2n5b2sst9QDifswjQATeNk4ICqOqMfkgssqKE5KcC8JAkAKVfR2J",
	"2XBNgFkn4x4j3udveNuA5IcN1OZUJtXfIuMhDvoj6tFcYyf9uqeGyZMl0IqgT3pzO5nLMiG6ZAy1XpdZ",
	"VlkBTB8ngIMB/l+rZtfzaLzodrvFsl4eimpYFN95GUiRVd8PqIwubYz2kof37e+v2gsvQ4N9CSrM5dZG",
	"ayKtlbQSQ6KNVNjT15lztAf4tHID1+Fvw8UwQq1JePDb0ZZ+pJBpP8mGTl/FV0Wnx+sQ4FVF5md/Rahv",
	"Gw/0afvU2eeRS+Gadeu/1PaNc7w80Ky/AHPRs9ztK8/9C9He7f1HpH6+/Q/9B8APvg8QuaoIN3qIye7M",
	"PBdr+TR0Pv0z0Z/uH/VMnDyLlNor47L8qvrKTj3/pK88Jo5Ly4uoVNluyI7DMJMMso3UJn4TvYlCKHi4",
	"ndB6Wf8ZAAD//0/pvKEvFAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
