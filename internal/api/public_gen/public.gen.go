// Package public_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package public_gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	googleuuid "github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ForgetPasswordReq defines model for ForgetPasswordReq.
type ForgetPasswordReq struct {
	Email openapi_types.Email `json:"email"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`
}

// RegisterRequest defines model for RegisterRequest.
type RegisterRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// RegisterResponse defines model for RegisterResponse.
type RegisterResponse struct {
	UserId *googleuuid.UUID `json:"user_id,omitempty"`
}

// ResetPassword defines model for ResetPassword.
type ResetPassword struct {
	Password string `json:"password"`
}

// ResetPasswordHandlerParams defines parameters for ResetPasswordHandler.
type ResetPasswordHandlerParams struct {
	Token string `form:"token" json:"token"`
}

// VerifyUserHandlerParams defines parameters for VerifyUserHandler.
type VerifyUserHandlerParams struct {
	Token string `form:"token" json:"token"`
}

// ForgetPasswordHandlerJSONRequestBody defines body for ForgetPasswordHandler for application/json ContentType.
type ForgetPasswordHandlerJSONRequestBody = ForgetPasswordReq

// LogInUserHandlerJSONRequestBody defines body for LogInUserHandler for application/json ContentType.
type LogInUserHandlerJSONRequestBody = LoginRequest

// RegisterUserHandlerJSONRequestBody defines body for RegisterUserHandler for application/json ContentType.
type RegisterUserHandlerJSONRequestBody = RegisterRequest

// ResetPasswordHandlerJSONRequestBody defines body for ResetPasswordHandler for application/json ContentType.
type ResetPasswordHandlerJSONRequestBody = ResetPassword

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start password reset flow
	// (POST /users/forget-password)
	ForgetPasswordHandler(ctx echo.Context) error
	// Log in a user
	// (POST /users/login)
	LogInUserHandler(ctx echo.Context) error
	// Register a new user
	// (POST /users/register)
	RegisterUserHandler(ctx echo.Context) error
	// reset password completely
	// (PUT /users/reset-password)
	ResetPasswordHandler(ctx echo.Context, params ResetPasswordHandlerParams) error
	// Verify a user with a confirmation token via email with verification token
	// (GET /users/verify)
	VerifyUserHandler(ctx echo.Context, params VerifyUserHandlerParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ForgetPasswordHandler converts echo context to params.
func (w *ServerInterfaceWrapper) ForgetPasswordHandler(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ForgetPasswordHandler(ctx)
	return err
}

// LogInUserHandler converts echo context to params.
func (w *ServerInterfaceWrapper) LogInUserHandler(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogInUserHandler(ctx)
	return err
}

// RegisterUserHandler converts echo context to params.
func (w *ServerInterfaceWrapper) RegisterUserHandler(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegisterUserHandler(ctx)
	return err
}

// ResetPasswordHandler converts echo context to params.
func (w *ServerInterfaceWrapper) ResetPasswordHandler(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ResetPasswordHandlerParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResetPasswordHandler(ctx, params)
	return err
}

// VerifyUserHandler converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyUserHandler(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifyUserHandlerParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyUserHandler(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/users/forget-password", wrapper.ForgetPasswordHandler)
	router.POST(baseURL+"/users/login", wrapper.LogInUserHandler)
	router.POST(baseURL+"/users/register", wrapper.RegisterUserHandler)
	router.PUT(baseURL+"/users/reset-password", wrapper.ResetPasswordHandler)
	router.GET(baseURL+"/users/verify", wrapper.VerifyUserHandler)

}

type BadRequestErrorResponse struct {
}

type ConflictErrorResponse struct {
}

type InternalServerErrorResponse struct {
}

type NotFoundErrorResponse struct {
}

type UnauthorizedAccessErrorResponse struct {
}

type ForgetPasswordHandlerRequestObject struct {
	Body *ForgetPasswordHandlerJSONRequestBody
}

type ForgetPasswordHandlerResponseObject interface {
	VisitForgetPasswordHandlerResponse(w http.ResponseWriter) error
}

type ForgetPasswordHandler202Response struct {
}

func (response ForgetPasswordHandler202Response) VisitForgetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ForgetPasswordHandler404Response = NotFoundErrorResponse

func (response ForgetPasswordHandler404Response) VisitForgetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ForgetPasswordHandler500Response = InternalServerErrorResponse

func (response ForgetPasswordHandler500Response) VisitForgetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type LogInUserHandlerRequestObject struct {
	Body *LogInUserHandlerJSONRequestBody
}

type LogInUserHandlerResponseObject interface {
	VisitLogInUserHandlerResponse(w http.ResponseWriter) error
}

type LogInUserHandler200ResponseHeaders struct {
	SetCookie string
}

type LogInUserHandler200JSONResponse struct {
	Body    LoginResponse
	Headers LogInUserHandler200ResponseHeaders
}

func (response LogInUserHandler200JSONResponse) VisitLogInUserHandlerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type LogInUserHandler400Response = BadRequestErrorResponse

func (response LogInUserHandler400Response) VisitLogInUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LogInUserHandler401Response = UnauthorizedAccessErrorResponse

func (response LogInUserHandler401Response) VisitLogInUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LogInUserHandler404Response = NotFoundErrorResponse

func (response LogInUserHandler404Response) VisitLogInUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LogInUserHandler500Response = InternalServerErrorResponse

func (response LogInUserHandler500Response) VisitLogInUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type RegisterUserHandlerRequestObject struct {
	Body *RegisterUserHandlerJSONRequestBody
}

type RegisterUserHandlerResponseObject interface {
	VisitRegisterUserHandlerResponse(w http.ResponseWriter) error
}

type RegisterUserHandler201JSONResponse RegisterResponse

func (response RegisterUserHandler201JSONResponse) VisitRegisterUserHandlerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUserHandler400Response = BadRequestErrorResponse

func (response RegisterUserHandler400Response) VisitRegisterUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUserHandler409Response = ConflictErrorResponse

func (response RegisterUserHandler409Response) VisitRegisterUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type RegisterUserHandler500Response = InternalServerErrorResponse

func (response RegisterUserHandler500Response) VisitRegisterUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ResetPasswordHandlerRequestObject struct {
	Params ResetPasswordHandlerParams
	Body   *ResetPasswordHandlerJSONRequestBody
}

type ResetPasswordHandlerResponseObject interface {
	VisitResetPasswordHandlerResponse(w http.ResponseWriter) error
}

type ResetPasswordHandler202Response struct {
}

func (response ResetPasswordHandler202Response) VisitResetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ResetPasswordHandler400Response = BadRequestErrorResponse

func (response ResetPasswordHandler400Response) VisitResetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ResetPasswordHandler401Response = UnauthorizedAccessErrorResponse

func (response ResetPasswordHandler401Response) VisitResetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ResetPasswordHandler500Response = InternalServerErrorResponse

func (response ResetPasswordHandler500Response) VisitResetPasswordHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type VerifyUserHandlerRequestObject struct {
	Params VerifyUserHandlerParams
}

type VerifyUserHandlerResponseObject interface {
	VisitVerifyUserHandlerResponse(w http.ResponseWriter) error
}

type VerifyUserHandler200Response struct {
}

func (response VerifyUserHandler200Response) VisitVerifyUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type VerifyUserHandler401Response = UnauthorizedAccessErrorResponse

func (response VerifyUserHandler401Response) VisitVerifyUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifyUserHandler500Response = InternalServerErrorResponse

func (response VerifyUserHandler500Response) VisitVerifyUserHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Start password reset flow
	// (POST /users/forget-password)
	ForgetPasswordHandler(ctx context.Context, request ForgetPasswordHandlerRequestObject) (ForgetPasswordHandlerResponseObject, error)
	// Log in a user
	// (POST /users/login)
	LogInUserHandler(ctx context.Context, request LogInUserHandlerRequestObject) (LogInUserHandlerResponseObject, error)
	// Register a new user
	// (POST /users/register)
	RegisterUserHandler(ctx context.Context, request RegisterUserHandlerRequestObject) (RegisterUserHandlerResponseObject, error)
	// reset password completely
	// (PUT /users/reset-password)
	ResetPasswordHandler(ctx context.Context, request ResetPasswordHandlerRequestObject) (ResetPasswordHandlerResponseObject, error)
	// Verify a user with a confirmation token via email with verification token
	// (GET /users/verify)
	VerifyUserHandler(ctx context.Context, request VerifyUserHandlerRequestObject) (VerifyUserHandlerResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ForgetPasswordHandler operation middleware
func (sh *strictHandler) ForgetPasswordHandler(ctx echo.Context) error {
	var request ForgetPasswordHandlerRequestObject

	var body ForgetPasswordHandlerJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ForgetPasswordHandler(ctx.Request().Context(), request.(ForgetPasswordHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ForgetPasswordHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ForgetPasswordHandlerResponseObject); ok {
		return validResponse.VisitForgetPasswordHandlerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// LogInUserHandler operation middleware
func (sh *strictHandler) LogInUserHandler(ctx echo.Context) error {
	var request LogInUserHandlerRequestObject

	var body LogInUserHandlerJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LogInUserHandler(ctx.Request().Context(), request.(LogInUserHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogInUserHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogInUserHandlerResponseObject); ok {
		return validResponse.VisitLogInUserHandlerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RegisterUserHandler operation middleware
func (sh *strictHandler) RegisterUserHandler(ctx echo.Context) error {
	var request RegisterUserHandlerRequestObject

	var body RegisterUserHandlerJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUserHandler(ctx.Request().Context(), request.(RegisterUserHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUserHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterUserHandlerResponseObject); ok {
		return validResponse.VisitRegisterUserHandlerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ResetPasswordHandler operation middleware
func (sh *strictHandler) ResetPasswordHandler(ctx echo.Context, params ResetPasswordHandlerParams) error {
	var request ResetPasswordHandlerRequestObject

	request.Params = params

	var body ResetPasswordHandlerJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ResetPasswordHandler(ctx.Request().Context(), request.(ResetPasswordHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResetPasswordHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ResetPasswordHandlerResponseObject); ok {
		return validResponse.VisitResetPasswordHandlerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// VerifyUserHandler operation middleware
func (sh *strictHandler) VerifyUserHandler(ctx echo.Context, params VerifyUserHandlerParams) error {
	var request VerifyUserHandlerRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyUserHandler(ctx.Request().Context(), request.(VerifyUserHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyUserHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(VerifyUserHandlerResponseObject); ok {
		return validResponse.VisitVerifyUserHandlerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYX2/bNhD/KgS3R9mSU6dL/dS0XTAX6RAkzfpQBAUjnSS2FMmSlFMv8HcfjpRtybKc",
	"YGvWAXuLpft/v7v7Kfc0VZVWEqSzdHZPDVitpAX/4xXLLuFrDdb9aowy+CgDmxquHVeSzuhcLpjgGeFS",
	"1y4itywjJijQVURfK5kLng4pp81rcsddSVwJxIJZgCHWMQdoYC4dGMnElX8+GEMQWmuDF1tF9HflzlQt",
	"swE99FJbIpUjOYqhyrVktSuV4X9CdpqmYO2AcluQMC9JV6uI2rSEivninSlTgLtg1t4pg3XEh9ooDcbx",
	"UF+oGBf+j2+s0gLojNYWzMvm5zhVFY1orkzFHJ014hF1Sw0+AcNl4d1i0bmBjM4+NlI3GzF1+xlS349z",
	"VXDZNPSpgomobjLumrqCtDZw8dLaydGztp2NeEQrLs9BFq6ks5PHZdnydiDhgOh+xqFvn5z6ArLf4rcf",
	"3jedJUHioZA65vaFcwkFtw7M/6kF25yHuoAZfuI7sR4fJ3AyTZIRHL24HU0n2XTEfpk8H02nz58fH0+n",
	"SZIk7RQKpQoBdc2zXj0i+m1UqFHzcCs4vr6ev2m/HfFKK+PbIlkFu1Y1w6rQgruyvsVWxOF17N+vsDp7",
	"srfbFdBP/d/p04H+4MZCb9wtr3BzNWsfmAFzWqP1e3rrf52tg3j74T1t9hxaCm+3RS+d06EYXOaqP1Wn",
	"F3OSK0Ow6wR3KKmYZAVUIB3hkjBJlBRcAtElMxVLlzSigqfQYKfpzLv5e6yv486X7BqtYcDk3dba6cWc",
	"RnQBxgbXyTgZT3zDFdN8lKoMCpCjimeZgDtmMPmP9F3r501P2OOkYlpzWQT0YvOHUBEghsVQGiTTnM7o",
	"s3EyTho4eQsxlsLGuT8XozYktApLoltBnhMWyhdUSMltXIIha9UIb+mSpEyuj7Gv+Po1MQhK6mMyDI3O",
	"39AZzTvn6jcmM+H7upXCPM8GpBpHr1S2xIhTJR1IHzzTWvDUW4g/W+UXbbiS+NfPBnI6oz/FWxYSNzc0",
	"7h/QVRfaztTgH7Qoy1FyNHjqcUFrB1lEtABmgaQlpF/I4BqdJtOhGDc+4y7LWEX0OEke1trHbPw01lXF",
	"zBK3gGPG7TSN5ELdYaSs8FjV9a3gKb1BzQZGAk/eMHjOVeGnLACotlwWIX/CZLbxNianuUMiVvuTltdC",
	"LIm3HJFUcByuOy4EMZACX0DnTHpDBnIDttwczi7UhCrmEkd2CGXnfYGnAFiHDz0KW8n39t0cRe+826mr",
	"Te1D5WlES2AZGB/KFbjRa6W+cOj3+LJdfJIGqagV1+65WHmsPwK1u98DXm/ysN4Qrf7RM9aZhsNzZRoe",
	"Mzxaa6ZDGJFwFwbMf9n056sH+LXu02N+l4M+CvaTJ3A/jHx/zFMDzEFGrloraEwuwt5egOH5ckz/EW5f",
	"PKzX/YD9frjbA5WH0Gd3uUF9kBoMH/7IE4NaZ8wBWXBGXMktAZlpxWWfFpg2gx3a15f7hTQzrALnV9bH",
	"e4p3iX6twSCla3jc+kB0EXhoWd081Vy0mfrfJRqbUof6ZvtZxY/ZtN8Ju4GIbBJFKwIciOVhBIeRxQAK",
	"2IPchm/wAqEZeQxbUijiSqPqogwT33SWaKM83/Do3cswgrdDFOOPPRJPh9c+idghqG2iFXKF7D/U9FCt",
	"9XLxV42RVMmc41ch9iSQDexIOHdeptO1zT9ReiDxX6HoOtS9NqL5kJzFsVApE6WybnaSnCQx0zxeTOjq",
	"ZvVXAAAA///gN6X7uRQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
