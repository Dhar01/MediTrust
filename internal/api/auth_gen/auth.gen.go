// Package auth_gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auth_gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	googleuuid "github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// RequestPasswordReset defines model for RequestPasswordReset.
type RequestPasswordReset struct {
	Email openapi_types.Email `json:"email"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`
}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignUpResponse defines model for SignUpResponse.
type SignUpResponse struct {
	UserId *googleuuid.UUID `json:"user_id,omitempty"`
}

// UpdatePasswordRequest defines model for UpdatePasswordRequest.
type UpdatePasswordRequest struct {
	Password string `json:"password"`
}

// UpdatePasswordResetParams defines parameters for UpdatePasswordReset.
type UpdatePasswordResetParams struct {
	Token string `form:"token" json:"token"`
}

// VerifySignedUpUserParams defines parameters for VerifySignedUpUser.
type VerifySignedUpUserParams struct {
	Token string `form:"token" json:"token"`
}

// LogInUserJSONRequestBody defines body for LogInUser for application/json ContentType.
type LogInUserJSONRequestBody = SignInRequest

// RequestPasswordResetJSONRequestBody defines body for RequestPasswordReset for application/json ContentType.
type RequestPasswordResetJSONRequestBody = RequestPasswordReset

// UpdatePasswordResetJSONRequestBody defines body for UpdatePasswordReset for application/json ContentType.
type UpdatePasswordResetJSONRequestBody = UpdatePasswordRequest

// UserSignUpHandlerJSONRequestBody defines body for UserSignUpHandler for application/json ContentType.
type UserSignUpHandlerJSONRequestBody = SignUpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user using email and password
	// (POST /auth/login)
	LogInUser(ctx echo.Context) error
	// user logout
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// Request for password update for the user
	// (POST /auth/reset)
	RequestPasswordReset(ctx echo.Context) error
	// update password via verify token for the user
	// (PUT /auth/reset)
	UpdatePasswordReset(ctx echo.Context, params UpdatePasswordResetParams) error
	// Create/Sign Up a new user.
	// (POST /auth/signup)
	UserSignUpHandler(ctx echo.Context) error
	// Verify a user with a confirmation token
	// (GET /auth/verify)
	VerifySignedUpUser(ctx echo.Context, params VerifySignedUpUserParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// LogInUser converts echo context to params.
func (w *ServerInterfaceWrapper) LogInUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LogInUser(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// RequestPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) RequestPasswordReset(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestPasswordReset(ctx)
	return err
}

// UpdatePasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePasswordReset(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePasswordResetParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePasswordReset(ctx, params)
	return err
}

// UserSignUpHandler converts echo context to params.
func (w *ServerInterfaceWrapper) UserSignUpHandler(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UserSignUpHandler(ctx)
	return err
}

// VerifySignedUpUser converts echo context to params.
func (w *ServerInterfaceWrapper) VerifySignedUpUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifySignedUpUserParams
	// ------------- Required query parameter "token" -------------

	err = runtime.BindQueryParameter("form", true, true, "token", ctx.QueryParams(), &params.Token)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifySignedUpUser(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.LogInUser)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.POST(baseURL+"/auth/reset", wrapper.RequestPasswordReset)
	router.PUT(baseURL+"/auth/reset", wrapper.UpdatePasswordReset)
	router.POST(baseURL+"/auth/signup", wrapper.UserSignUpHandler)
	router.GET(baseURL+"/auth/verify", wrapper.VerifySignedUpUser)

}

type BadRequestErrorResponse struct {
}

type InternalServerErrorResponse struct {
}

type NotFoundErrorResponse struct {
}

type UnauthorizedAccessErrorResponse struct {
}

type LogInUserRequestObject struct {
	Body *LogInUserJSONRequestBody
}

type LogInUserResponseObject interface {
	VisitLogInUserResponse(w http.ResponseWriter) error
}

type LogInUser200ResponseHeaders struct {
	SetCookie string
}

type LogInUser200JSONResponse struct {
	Body    SignInResponse
	Headers LogInUser200ResponseHeaders
}

func (response LogInUser200JSONResponse) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type LogInUser400Response = BadRequestErrorResponse

func (response LogInUser400Response) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LogInUser401Response = UnauthorizedAccessErrorResponse

func (response LogInUser401Response) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LogInUser404Response = NotFoundErrorResponse

func (response LogInUser404Response) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type LogInUser500Response = InternalServerErrorResponse

func (response LogInUser500Response) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostAuthLogoutRequestObject struct {
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(w http.ResponseWriter) error
}

type PostAuthLogout200ResponseHeaders struct {
	SetCookie string
}

type PostAuthLogout200JSONResponse struct {
	Body    string
	Headers PostAuthLogout200ResponseHeaders
}

func (response PostAuthLogout200JSONResponse) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthLogout401Response = UnauthorizedAccessErrorResponse

func (response PostAuthLogout401Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostAuthLogout500Response = InternalServerErrorResponse

func (response PostAuthLogout500Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type RequestPasswordResetRequestObject struct {
	Body *RequestPasswordResetJSONRequestBody
}

type RequestPasswordResetResponseObject interface {
	VisitRequestPasswordResetResponse(w http.ResponseWriter) error
}

type RequestPasswordReset202Response struct {
}

func (response RequestPasswordReset202Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type RequestPasswordReset400Response = BadRequestErrorResponse

func (response RequestPasswordReset400Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RequestPasswordReset401Response = UnauthorizedAccessErrorResponse

func (response RequestPasswordReset401Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type RequestPasswordReset404Response = NotFoundErrorResponse

func (response RequestPasswordReset404Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RequestPasswordReset500Response = InternalServerErrorResponse

func (response RequestPasswordReset500Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UpdatePasswordResetRequestObject struct {
	Params UpdatePasswordResetParams
	Body   *UpdatePasswordResetJSONRequestBody
}

type UpdatePasswordResetResponseObject interface {
	VisitUpdatePasswordResetResponse(w http.ResponseWriter) error
}

type UpdatePasswordReset202Response struct {
}

func (response UpdatePasswordReset202Response) VisitUpdatePasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type UpdatePasswordReset400Response = BadRequestErrorResponse

func (response UpdatePasswordReset400Response) VisitUpdatePasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UpdatePasswordReset401Response = UnauthorizedAccessErrorResponse

func (response UpdatePasswordReset401Response) VisitUpdatePasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UpdatePasswordReset500Response = InternalServerErrorResponse

func (response UpdatePasswordReset500Response) VisitUpdatePasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type UserSignUpHandlerRequestObject struct {
	Body *UserSignUpHandlerJSONRequestBody
}

type UserSignUpHandlerResponseObject interface {
	VisitUserSignUpHandlerResponse(w http.ResponseWriter) error
}

type UserSignUpHandler201JSONResponse SignUpResponse

func (response UserSignUpHandler201JSONResponse) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UserSignUpHandler400Response = BadRequestErrorResponse

func (response UserSignUpHandler400Response) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UserSignUpHandler500Response = InternalServerErrorResponse

func (response UserSignUpHandler500Response) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type VerifySignedUpUserRequestObject struct {
	Params VerifySignedUpUserParams
}

type VerifySignedUpUserResponseObject interface {
	VisitVerifySignedUpUserResponse(w http.ResponseWriter) error
}

type VerifySignedUpUser200Response struct {
}

func (response VerifySignedUpUser200Response) VisitVerifySignedUpUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type VerifySignedUpUser401Response = UnauthorizedAccessErrorResponse

func (response VerifySignedUpUser401Response) VisitVerifySignedUpUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifySignedUpUser500Response = InternalServerErrorResponse

func (response VerifySignedUpUser500Response) VisitVerifySignedUpUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Log in a user using email and password
	// (POST /auth/login)
	LogInUser(ctx context.Context, request LogInUserRequestObject) (LogInUserResponseObject, error)
	// user logout
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Request for password update for the user
	// (POST /auth/reset)
	RequestPasswordReset(ctx context.Context, request RequestPasswordResetRequestObject) (RequestPasswordResetResponseObject, error)
	// update password via verify token for the user
	// (PUT /auth/reset)
	UpdatePasswordReset(ctx context.Context, request UpdatePasswordResetRequestObject) (UpdatePasswordResetResponseObject, error)
	// Create/Sign Up a new user.
	// (POST /auth/signup)
	UserSignUpHandler(ctx context.Context, request UserSignUpHandlerRequestObject) (UserSignUpHandlerResponseObject, error)
	// Verify a user with a confirmation token
	// (GET /auth/verify)
	VerifySignedUpUser(ctx context.Context, request VerifySignedUpUserRequestObject) (VerifySignedUpUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// LogInUser operation middleware
func (sh *strictHandler) LogInUser(ctx echo.Context) error {
	var request LogInUserRequestObject

	var body LogInUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LogInUser(ctx.Request().Context(), request.(LogInUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogInUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogInUserResponseObject); ok {
		return validResponse.VisitLogInUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx echo.Context) error {
	var request PostAuthLogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogout(ctx.Request().Context(), request.(PostAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthLogoutResponseObject); ok {
		return validResponse.VisitPostAuthLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestPasswordReset operation middleware
func (sh *strictHandler) RequestPasswordReset(ctx echo.Context) error {
	var request RequestPasswordResetRequestObject

	var body RequestPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestPasswordReset(ctx.Request().Context(), request.(RequestPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestPasswordResetResponseObject); ok {
		return validResponse.VisitRequestPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePasswordReset operation middleware
func (sh *strictHandler) UpdatePasswordReset(ctx echo.Context, params UpdatePasswordResetParams) error {
	var request UpdatePasswordResetRequestObject

	request.Params = params

	var body UpdatePasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePasswordReset(ctx.Request().Context(), request.(UpdatePasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePasswordResetResponseObject); ok {
		return validResponse.VisitUpdatePasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UserSignUpHandler operation middleware
func (sh *strictHandler) UserSignUpHandler(ctx echo.Context) error {
	var request UserSignUpHandlerRequestObject

	var body UserSignUpHandlerJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserSignUpHandler(ctx.Request().Context(), request.(UserSignUpHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserSignUpHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UserSignUpHandlerResponseObject); ok {
		return validResponse.VisitUserSignUpHandlerResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// VerifySignedUpUser operation middleware
func (sh *strictHandler) VerifySignedUpUser(ctx echo.Context, params VerifySignedUpUserParams) error {
	var request VerifySignedUpUserRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignedUpUser(ctx.Request().Context(), request.(VerifySignedUpUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignedUpUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(VerifySignedUpUserResponseObject); ok {
		return validResponse.VisitVerifySignedUpUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYW2/bNhT+KwS3R9mSU6fL/NS0XTEX7RDE9foQGAUjHUtsJJLlJakX+L8Ph6Qd+aLE",
	"WJKhQN8s8fBcP3785Fuay0ZJAcIaOrqlGoySwoB/eM2Kc/jmwNg/tJYaXxVgcs2V5VLQER2La1bzgnCh",
	"nE3IJSuIDhvoMqFjYUELVk9AX4PudBGMiPFWBLzZMqF/SftOOlF07DOWWWeIkJbM0Qy3TAVztpKa/wPF",
	"aZ6DMR2b24aEeUu6XCbU5BU0zNceCz9jxtxIXZyDAYvvlZYKtOWhQ9AwXvsf31mjaqAj6gzoV/Gxn8uG",
	"JnQudcMsHUXzhNqFAl+D5qL0kbFtXENBRxfRarY2k5dfIfcdnfBSjEVM7bmySaiKRW+6mkDuNJy9MmZw",
	"9KLtZ22e0IaLDyBKW9HRyWFltqLdV3FA5W7JYXhfrLwCsTvn958/xfGSYPFQThvuuvKZqp9tAlhx1wSw",
	"vi98K9Pj4wxOhlnWg6PfL3vDQTHssd8GL3vD4cuXx8fDYZZlWbuAUsqyBud4sdONhH7vlbIXX94Z9qfT",
	"8dv2ao83Smo/FMEa2PaqGPaEltxW7hIHkYbl1K8vsTc7tU9VwSzccUDH1P+fad0zJaQujMbtYoIUFukb",
	"mAZ96tD7Lb30T+9WSbz//IlGwkNPYfWu+ZW1KjSFi7ncPVmnZ2Myl5rg9AmSKWmYYCU0ICzhgjBBpKi5",
	"AKIqphuWL2hCa55DxFCc0MfxJ+yz5da3bIreMGHy8c7b6dmYJvQatAmhs37WH/jBS6Z4L5cFlCB6DS+K",
	"Gm6YxuIv6MfW42zH2OOlYUpxUQYUIwi60BGghs2QCgRTnI7oi37WzyKsvIcUu5DWsuSeiJQMSNlsWy1L",
	"353QN2e4KIk/hYSJgrSAgfBiuGn8NmwbC2zOxgom/KG1Eq/e17JYYORcCgvCJ8GUqnnud6VfjfQJhrsO",
	"f/2qYU5H9Jf0Tgqk8SZMN2+c5SYmrXbgX7Q0w1GWPXnwSD0++mY/J84T9tzVJHQ+oRWwArTPZQK290bK",
	"Kw67kziHuQZThXuB5MEqaSW2fRgx+DAUty/ndRPSbdXk9w0e3telXvz+4cP7NwXTMqHHh2S7T6R5PnFN",
	"w/QiQOwwzFpW+qOHZdAZOlmfCensvYfCEOkssRV4LgFhETBQhJCXC8KD0GQWg6OZbo9v51ScSWORRj6E",
	"yI+E6A4Skt0CMH2zBmO9OByIsTQoNms6HJKPg9bjQBIvHTq62LxuLmbLWRtDfo71ahpdQNFrkb0XJ3y+",
	"AuFc6hIsqbhJK9BrDCYIjQXJmVh9hvg7arVMgv9tctX7lP42os73Gz0H5e4NdRDzHnV+JqGuVRaKhKga",
	"mAGSV5BfkU79+VMS3fk+zDgvAf075B0XrtotBCdUuXsB2w3HxMM1RrnmjNiKGwKiUJKLXbC6LUW6D6vT",
	"vTaKadaA9Yx0cUtRpdBvDjRSVVRjKzLdxNl9DDR7niOwX3f/1zOwNcviRwL8E0E34mddKQLpGjSfL+Jt",
	"cj9+1wxseCmc6qbgcyi5sSj5iYCbgO0bbivU+w/o2CLq+/A9+ScTRf2sqvXuK/0g3AyePHi3avWfObkG",
	"L3EmLdXQJ2eBnsPs+o9B5hMh641P0xdFpqo1934LRh5VLRiF9DF8CXtQdDpHCCHWiFOJ92ZIKYmttHRl",
	"FaqPzSdKS/8HjufGHbWHnBiiYYZQTNXez6S/95k8HyPuis2tW7k181gtFD8QnYR2rS6vcMBJLsWc6yZM",
	"Zf132haReFGIbkNPna7jnwmjNK1lzupKGjs6yU6ylCmeXg/ocrb8NwAA//8lo+9ThRYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
