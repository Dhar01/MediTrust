// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// RequestPasswordReset defines model for RequestPasswordReset.
type RequestPasswordReset struct {
	Email openapi_types.Email `json:"email"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`
}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignUpResponse defines model for SignUpResponse.
type SignUpResponse struct {
	UserId *googleuuid.UUID `json:"user_id,omitempty"`
}

// VerifySignedUpUserParams defines parameters for VerifySignedUpUser.
type VerifySignedUpUserParams struct {
	Token string `form:"token" json:"token"`
}

// LogInUserJSONRequestBody defines body for LogInUser for application/json ContentType.
type LogInUserJSONRequestBody = SignInRequest

// RequestPasswordResetJSONRequestBody defines body for RequestPasswordReset for application/json ContentType.
type RequestPasswordResetJSONRequestBody = RequestPasswordReset

// UserSignUpHandlerJSONRequestBody defines body for UserSignUpHandler for application/json ContentType.
type UserSignUpHandlerJSONRequestBody = SignUpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user using email and password
	// (POST /auth/login)
	LogInUser(c *gin.Context)
	// user logout
	// (POST /auth/logout)
	PostAuthLogout(c *gin.Context)
	// Request for password update for the user
	// (POST /auth/reset)
	RequestPasswordReset(c *gin.Context)
	// update password via verify token for the user
	// (PUT /auth/reset)
	UpdatePasswordReset(c *gin.Context)
	// Create/Sign Up a new user.
	// (POST /auth/signup)
	UserSignUpHandler(c *gin.Context)
	// Verify a user with a confirmation token
	// (GET /auth/verify)
	VerifySignedUpUser(c *gin.Context, params VerifySignedUpUserParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// LogInUser operation middleware
func (siw *ServerInterfaceWrapper) LogInUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogInUser(c)
}

// PostAuthLogout operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogout(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostAuthLogout(c)
}

// RequestPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) RequestPasswordReset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RequestPasswordReset(c)
}

// UpdatePasswordReset operation middleware
func (siw *ServerInterfaceWrapper) UpdatePasswordReset(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdatePasswordReset(c)
}

// UserSignUpHandler operation middleware
func (siw *ServerInterfaceWrapper) UserSignUpHandler(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserSignUpHandler(c)
}

// VerifySignedUpUser operation middleware
func (siw *ServerInterfaceWrapper) VerifySignedUpUser(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params VerifySignedUpUserParams

	// ------------- Required query parameter "token" -------------

	if paramValue := c.Query("token"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument token is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "token", c.Request.URL.Query(), &params.Token)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter token: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifySignedUpUser(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/auth/login", wrapper.LogInUser)
	router.POST(options.BaseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.POST(options.BaseURL+"/auth/reset", wrapper.RequestPasswordReset)
	router.PUT(options.BaseURL+"/auth/reset", wrapper.UpdatePasswordReset)
	router.POST(options.BaseURL+"/auth/signup", wrapper.UserSignUpHandler)
	router.GET(options.BaseURL+"/auth/verify", wrapper.VerifySignedUpUser)
}

type InternalServerErrorResponse struct {
}

type InvalidInputResponse struct {
}

type NotFoundResponse struct {
}

type UnauthorizedAccessResponse struct {
}

type LogInUserRequestObject struct {
	Body *LogInUserJSONRequestBody
}

type LogInUserResponseObject interface {
	VisitLogInUserResponse(w http.ResponseWriter) error
}

type LogInUser200ResponseHeaders struct {
	SetCookie string
}

type LogInUser200JSONResponse struct {
	Body    SignInResponse
	Headers LogInUser200ResponseHeaders
}

func (response LogInUser200JSONResponse) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type LogInUser400Response = InvalidInputResponse

func (response LogInUser400Response) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type LogInUser500Response = InternalServerErrorResponse

func (response LogInUser500Response) VisitLogInUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type PostAuthLogoutRequestObject struct {
}

type PostAuthLogoutResponseObject interface {
	VisitPostAuthLogoutResponse(w http.ResponseWriter) error
}

type PostAuthLogout200ResponseHeaders struct {
	SetCookie string
}

type PostAuthLogout200JSONResponse struct {
	Body    string
	Headers PostAuthLogout200ResponseHeaders
}

func (response PostAuthLogout200JSONResponse) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type PostAuthLogout401Response = UnauthorizedAccessResponse

func (response PostAuthLogout401Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostAuthLogout500Response = InternalServerErrorResponse

func (response PostAuthLogout500Response) VisitPostAuthLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type RequestPasswordResetRequestObject struct {
	Body *RequestPasswordResetJSONRequestBody
}

type RequestPasswordResetResponseObject interface {
	VisitRequestPasswordResetResponse(w http.ResponseWriter) error
}

type UpdatePasswordResetRequestObject struct {
}

type UpdatePasswordResetResponseObject interface {
	VisitUpdatePasswordResetResponse(w http.ResponseWriter) error
}

type UserSignUpHandlerRequestObject struct {
	Body *UserSignUpHandlerJSONRequestBody
}

type UserSignUpHandlerResponseObject interface {
	VisitUserSignUpHandlerResponse(w http.ResponseWriter) error
}

type UserSignUpHandler201JSONResponse SignUpResponse

func (response UserSignUpHandler201JSONResponse) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UserSignUpHandler400Response = InvalidInputResponse

func (response UserSignUpHandler400Response) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UserSignUpHandler500Response = InternalServerErrorResponse

func (response UserSignUpHandler500Response) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type VerifySignedUpUserRequestObject struct {
	Params VerifySignedUpUserParams
}

type VerifySignedUpUserResponseObject interface {
	VisitVerifySignedUpUserResponse(w http.ResponseWriter) error
}

type VerifySignedUpUser200Response struct {
}

func (response VerifySignedUpUser200Response) VisitVerifySignedUpUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type VerifySignedUpUser400Response = InvalidInputResponse

func (response VerifySignedUpUser400Response) VisitVerifySignedUpUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifySignedUpUser500Response = InternalServerErrorResponse

func (response VerifySignedUpUser500Response) VisitVerifySignedUpUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Log in a user using email and password
	// (POST /auth/login)
	LogInUser(ctx context.Context, request LogInUserRequestObject) (LogInUserResponseObject, error)
	// user logout
	// (POST /auth/logout)
	PostAuthLogout(ctx context.Context, request PostAuthLogoutRequestObject) (PostAuthLogoutResponseObject, error)
	// Request for password update for the user
	// (POST /auth/reset)
	RequestPasswordReset(ctx context.Context, request RequestPasswordResetRequestObject) (RequestPasswordResetResponseObject, error)
	// update password via verify token for the user
	// (PUT /auth/reset)
	UpdatePasswordReset(ctx context.Context, request UpdatePasswordResetRequestObject) (UpdatePasswordResetResponseObject, error)
	// Create/Sign Up a new user.
	// (POST /auth/signup)
	UserSignUpHandler(ctx context.Context, request UserSignUpHandlerRequestObject) (UserSignUpHandlerResponseObject, error)
	// Verify a user with a confirmation token
	// (GET /auth/verify)
	VerifySignedUpUser(ctx context.Context, request VerifySignedUpUserRequestObject) (VerifySignedUpUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// LogInUser operation middleware
func (sh *strictHandler) LogInUser(ctx *gin.Context) {
	var request LogInUserRequestObject

	var body LogInUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.LogInUser(ctx, request.(LogInUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LogInUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogInUserResponseObject); ok {
		if err := validResponse.VisitLogInUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostAuthLogout operation middleware
func (sh *strictHandler) PostAuthLogout(ctx *gin.Context) {
	var request PostAuthLogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogout(ctx, request.(PostAuthLogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostAuthLogoutResponseObject); ok {
		if err := validResponse.VisitPostAuthLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RequestPasswordReset operation middleware
func (sh *strictHandler) RequestPasswordReset(ctx *gin.Context) {
	var request RequestPasswordResetRequestObject

	var body RequestPasswordResetJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestPasswordReset(ctx, request.(RequestPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RequestPasswordResetResponseObject); ok {
		if err := validResponse.VisitRequestPasswordResetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdatePasswordReset operation middleware
func (sh *strictHandler) UpdatePasswordReset(ctx *gin.Context) {
	var request UpdatePasswordResetRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePasswordReset(ctx, request.(UpdatePasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdatePasswordResetResponseObject); ok {
		if err := validResponse.VisitUpdatePasswordResetResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UserSignUpHandler operation middleware
func (sh *strictHandler) UserSignUpHandler(ctx *gin.Context) {
	var request UserSignUpHandlerRequestObject

	var body UserSignUpHandlerJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserSignUpHandler(ctx, request.(UserSignUpHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserSignUpHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UserSignUpHandlerResponseObject); ok {
		if err := validResponse.VisitUserSignUpHandlerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifySignedUpUser operation middleware
func (sh *strictHandler) VerifySignedUpUser(ctx *gin.Context, params VerifySignedUpUserParams) {
	var request VerifySignedUpUserRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifySignedUpUser(ctx, request.(VerifySignedUpUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifySignedUpUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifySignedUpUserResponseObject); ok {
		if err := validResponse.VisitVerifySignedUpUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYXW/bNhT9KwS3R9mSU6fL/NS0XTEX7RDE9foQGAUjXUtsJZLlR1Iv8H8fLsnYsiUn",
	"BtKiA/YWi5f36xweXuaO5rJRUoCwhk7uqAajpDDgf0yFBS1YPQN9A/oPraXGzwWYXHNluRR0sjEixlsR",
	"8GbrhE7FDat5MRXK2b5tfpVwv7xO6F/SvpFOFF1TY5l1hghpydJbrBM6F8zZSmr+DxTneQ7GdPe1bQgL",
	"Rut1Qk1eQcP8hkv46sDYC2bMrdTFJRjwuSotFWjLQx+gYbz2f3xjjaqBTqgzoF/En8NcNjShS6kbZukk",
	"mifUrhT49DUXpY+s4avjGgo6uYpWi42ZvP4Mue/EjJdiKmJqPyqbhKpY9K6rGeROw8ULY0Ynz9p+NuYJ",
	"bbh4B6K0FZ2cHVdmK9pDFQfudUsO4H2y8guILs5vP36I8JJg8VhOO+4O5TNX/zcEsOJDCGB9n/hepqen",
	"GZyNs2wAJ79fD8ajYjxgv42eD8bj589PT8fjLMuydgGllGUNzvGi042EfhuUchA/bg2H8/n0dXt1wBsl",
	"tQdFsAb2vSqGPaElt5W7RiDSsJz69TX2Zq92FATsOLer2VYYXgLToM8deruj1/7Xm/s63n78QKOMoKew",
	"ui2pslaFUFwsZZev5xdTspSaYE8JShRpmGAlNCAs4YIwQaSouQCiKqYblq9oQmueQ0Qm1v1++gGRs9x6",
	"MOboDRMm77fezi+mNKE3oE0InQ2z4ci3UzLFB7ksoAQxaHhR1HDLNIJ9Rd+3fi46xh6FhinFRRm4ga09",
	"1PMAIDZDKhBMcTqhz4bZMItgeQ8pdiGtZcn98VbS9NwYtSx9d0LfnOGiJJ7bhImCtA4H8pbhpunrsG0q",
	"sDk7K5jwu9aKDmf9pSxWGDmXwoLwSTClap77XelnI32C4QbBv37VsKQT+ku6vUbTeL+kuzq+3j2XVjvw",
	"H1r37UmWfffg8UD76Lv9nDkvg0tXk9D5hFbACtA+lxnYwSspv3DoInEJSw2mCmpL8mCVtBLbFyQMPg7F",
	"9eW8aUK6MzOsE3p63KbumOKPtWsaplcB6eOoY1npTwDykS7QyYaaMkwxB7lpiHSW2Ar8kQZhETcoQsjr",
	"FeGhNGYxOJrpdhc75LyQxuJpfhciP5EpHUCSbgGYvtlwol4dz4dYGhS7NR3PjNHjIPcMfE/mR5R9Orna",
	"FfyrxXrRpo+HsL4H4hBH9GZ47KUIX97zbyl1CZZU3KQV6A39EmTFiuRMkKhG/pa4XybB/7686b4Jdp9M",
	"l/1GP0L0ekM9rH2B0CdPTmGL+OEkel8WOA8qC0VCVA3MAMkryL8EhaA/Rbpah124um6T8bKPG04VzIL/",
	"htLiwqW2x9SE9r7EtsQ8TLvE0zJGueGM2IobAqJQkosuKYPhw5yc99o8hROPitxeu4r/HLaxwZs8sdM3",
	"oPlyFRX1YYA3UmR4KZw6rEWXUHJjcfokAm4D+LfcVjh6PjJSFXHUDA+GP5ko6h86QG2fYUcNUKPvHvzw",
	"AOUn7lyDv+ZnrZtzSC6CjgTshvQnjz+vfI6+IjJXLdCHLQ55SrU4FHLH8CX0UOh8ifxBohGnEu/NkFIS",
	"W2npyiqUHjtPlJb+ee6VozPuoGKEaJghFHPVO67/3WeimGYNWD+kXN1RfD/Qrw40Ti/xnXQfcJc6Dw0l",
	"i/5pa+/uaAEeq/1ZirJFOvToXs/DkSa5FEuOT1eEYvMfkj3p8PMQug2NdLqOL9lJmtYyZ3UljZ2cZWdZ",
	"yhRPb0Z0vVj/GwAA//8jGBbmPhQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
