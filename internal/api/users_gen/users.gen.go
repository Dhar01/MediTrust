// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package users

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Address defines model for Address.
type Address struct {
	City          *string `json:"city,omitempty"`
	Country       *string `json:"country,omitempty"`
	PostalCode    *string `json:"postal_code,omitempty"`
	StreetAddress *string `json:"street_address,omitempty"`
}

// Error500Problem defines model for Error500Problem.
type Error500Problem struct {
	Message *string `json:"message,omitempty"`
	Status  *int32  `json:"status,omitempty"`
}

// FullName defines model for FullName.
type FullName struct {
	FirstName *string `json:"first_name,omitempty"`
	LastName  *string `json:"last_name,omitempty"`
}

// RequestPasswordReset defines model for RequestPasswordReset.
type RequestPasswordReset struct {
	Email openapi_types.Email `json:"email"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignInResponse defines model for SignInResponse.
type SignInResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`
}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// SignUpResponse defines model for SignUpResponse.
type SignUpResponse struct {
	UserId *googleuuid.UUID `json:"user_id,omitempty"`
}

// User defines model for User.
type User struct {
	Address      *Address             `json:"address,omitempty"`
	Age          *int32               `json:"age,omitempty" validate:"gte=18"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	HashPassword *string              `json:"hashPassword,omitempty"`
	Id           *googleuuid.UUID     `json:"id,omitempty"`
	IsActive     *bool                `json:"is_active,omitempty"`
	Name         *FullName            `json:"name,omitempty"`
	Phone        *string              `json:"phone,omitempty"`
	Role         *string              `json:"role,omitempty"`
}

// UserID defines model for UserID.
type UserID = googleuuid.UUID

// UserSignUpHandlerJSONRequestBody defines body for UserSignUpHandler for application/json ContentType.
type UserSignUpHandlerJSONRequestBody = SignUpRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create/Sign Up a new user.
	// (POST /users)
	UserSignUpHandler(c *gin.Context)
	// Get user using userID
	// (GET /users/{userID})
	FetchUserInfoByID(c *gin.Context, userID UserID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// UserSignUpHandler operation middleware
func (siw *ServerInterfaceWrapper) UserSignUpHandler(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UserSignUpHandler(c)
}

// FetchUserInfoByID operation middleware
func (siw *ServerInterfaceWrapper) FetchUserInfoByID(c *gin.Context) {

	var err error

	// ------------- Path parameter "userID" -------------
	var userID UserID

	err = runtime.BindStyledParameterWithOptions("simple", "userID", c.Param("userID"), &userID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FetchUserInfoByID(c, userID)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/users", wrapper.UserSignUpHandler)
	router.GET(options.BaseURL+"/users/:userID", wrapper.FetchUserInfoByID)
}

type InternalServerErrorResponse struct {
}

type InvalidInputResponse struct {
}

type UserSignUpHandlerRequestObject struct {
	Body *UserSignUpHandlerJSONRequestBody
}

type UserSignUpHandlerResponseObject interface {
	VisitUserSignUpHandlerResponse(w http.ResponseWriter) error
}

type UserSignUpHandler201JSONResponse SignUpResponse

func (response UserSignUpHandler201JSONResponse) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type UserSignUpHandler400Response = InvalidInputResponse

func (response UserSignUpHandler400Response) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type UserSignUpHandler500Response = InternalServerErrorResponse

func (response UserSignUpHandler500Response) VisitUserSignUpHandlerResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type FetchUserInfoByIDRequestObject struct {
	UserID UserID `json:"userID"`
}

type FetchUserInfoByIDResponseObject interface {
	VisitFetchUserInfoByIDResponse(w http.ResponseWriter) error
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create/Sign Up a new user.
	// (POST /users)
	UserSignUpHandler(ctx context.Context, request UserSignUpHandlerRequestObject) (UserSignUpHandlerResponseObject, error)
	// Get user using userID
	// (GET /users/{userID})
	FetchUserInfoByID(ctx context.Context, request FetchUserInfoByIDRequestObject) (FetchUserInfoByIDResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// UserSignUpHandler operation middleware
func (sh *strictHandler) UserSignUpHandler(ctx *gin.Context) {
	var request UserSignUpHandlerRequestObject

	var body UserSignUpHandlerJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UserSignUpHandler(ctx, request.(UserSignUpHandlerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserSignUpHandler")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UserSignUpHandlerResponseObject); ok {
		if err := validResponse.VisitUserSignUpHandlerResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// FetchUserInfoByID operation middleware
func (sh *strictHandler) FetchUserInfoByID(ctx *gin.Context, userID UserID) {
	var request FetchUserInfoByIDRequestObject

	request.UserID = userID

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FetchUserInfoByID(ctx, request.(FetchUserInfoByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FetchUserInfoByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(FetchUserInfoByIDResponseObject); ok {
		if err := validResponse.VisitFetchUserInfoByIDResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXX2/bNhD/KgSXR9miEztNDQxosiyt22Yw4gZ9CILgIp0lthSpklQSL9B3H0gqlmUr",
	"TR86bNj60si8P7+7+90d+UgTVZRKorSGTh9pCRoKtKj916VBPTt1f3FJp7QEm9OISiiQTmkVDiOq8VvF",
	"NaZ0anWFETVJjgU4raXSBVg6pZlSmcCq4imNqF2VTt9YzWVGI/owyNSg+bEVHF5eeuvr0wEvSqWts9sg",
	"6Fj14KY04zavboeJKuJwHPvzuq5rh9SUShr0wc2kRS1BLFDfof5da6XdzymaRPPScuVCfhIixksR9GJ1",
	"RGfyDgRPZ7KsbJ+aPyXcHzvXISne8XGaajQh3VqVqC0PiBJuV+5/fICiFC7C0xy+wk7K6ogmqpJWb0mf",
	"gMwEpGjyPpVSGQviJlEpdtVG++xVn4KxGtHeQAt3U+eAnAOXZOGFdtXr9S/q9gsm1hn0OZ4wNtfqVmCx",
	"m4ACjYHMw+tBA7bqopgwFrUc49Ie7LdAuLSYoe5HclYJ8Ycn0TaEJdfG3sjmrA34vcoljWjB5UeUmaPa",
	"QU/KBPQqnyp8SbcP5QV+q9DYORhzr3R6gQbtLmIsgIuuP9eab5pP1wp0I01BvM9/28dXjdR1D6gFz+RM",
	"NtD+LjSunUPQXVMLTCqN8zfGjPYPNu2sxTtpPvqxMDe8fS/iMDt2Q4YkQWNurPqKcncUvP/8iQQJEiRe",
	"wtQx9xyey/L/VgEX8XMVcPHd8C2kkwnDozFjA9x/fTsYj9LxAF6NDgfj8eHhZDIeM8bYZgD/hh3VE7vb",
	"wT2ca4fynsYlndJf4naTx822iZ9WTR3RZq6u83PAdkZlN8ynefowUFDygdsbGcoBPlgNAwuZd+7XHFgf",
	"qcVfR0e+wD+LgjmYfN5Lw7192Bvt761OX529Nn9+PFt8eGDzD+/Si+zth2o4HPZZ+w8QJKLc3EBi+V23",
	"mOHi1bi/VUogSBfy0yr6HkfWu9D1fK7k1u5io0PW/Ou29mjUk2OtxJZ+UhmrCs+uF1eeW/NuvnC7WrT3",
	"pRMEjfq4ck4f6a3/OnsqyvvPn2hzu/Kx+9PWV25tGRqLy6Xanc7H8xlZKk0cPUkBEjIsUFrCJQFJlBRc",
	"Iilz0AUkKxpRwRNsRlBTv/PZJxe45daH69qVnLeGjuczGtE71CY4ZEM2HO12VcHTVOA9aNfeV/R84/N6",
	"R9gTqYCy5DJ0oWfHc7QJHHQpUCVKKDmd0oMhG7KGb95C7BIQrqTK9FxoLzDjxqImQCTeh3Tdc5u7LPn2",
	"JSBTsrED3LACpzxLm6yEIf4OZCp8hXRYYCcq9dfYREmL0ruGshQ88drxF6P8Um0fFd/jcnc11t1l45pk",
	"+xGwz0Y/3Xmzpbz3bhY9ORKNYDEli8ov+mUlxGpI5gLBILlDzZeroWPUmLHnPK5DiDvPkDqikx9T2n35",
	"+N6rigLco4L+5jH6iMhluVF0P1j97L/yI51eO8XAnvgxPAlrhyDDHhadoU1yAoE+riFdE3MlSWW4zMj6",
	"RdmS55RO6dJp+aeoXKqT1ZZE+mR3S2LzJXvVn5FWJG5euvV1y49AD/aj9HhxzvpF3kOKhgf/TMk3mkFW",
	"QrTz1ydtc/JeXbvktBR5izbUcat2m+wwjh5+qDuvoRCVFs1cnsaxUAmIXBk7PWJHLIaSx3cjWl/XfwUA",
	"AP//EZYIHJgQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
