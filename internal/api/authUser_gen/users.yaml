openapi: 3.0.0

info:
    title: User Management API
    description: API for user management in an online pharmacy
    version: 0.0.1
    license:
        name: MIT
    x-oapi-codegen-middlewares:
        - Middlewares
    x-oapi-codegen-type-mappings:
        uuid: github.com/google/uuid.UUID

servers:
    - url: http://localhost:8080/api/v1

paths:

    /users/me:

        # GET /api/v1/users/me
        get:
            summary: Get current user's profile


        # PUT /api/v1/users/me
        put:
            summary: Update user info (name, phone, etc)
            description: Update a user information using userID for the logged in user, takes partial update
            operationID: updateUserInfoByID
            tags:
                - users
            security:
                - BearerAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateUserRequest'
            responses:
                "202":
                    description: user information updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UpdateUserResponse'
                "400":
                    $ref: '#/components/responses/BadRequestError'
                "401":
                    $ref: '#/components/responses/UnauthorizedAccessError'
                "500":
                    $ref: '#/components/responses/InternalServerError'


        # DELETE /api/v1/users/me
        delete:
            summary: delete own account

    /users/logout:

        # POST /api/v1/users/logout
        post:
            summary: User logout (invalidate refresh token)
            summary: user logout
            description: logs out the authenticated user by invalidating the refresh token
            tags:
                - auth
            security:
                - BearerAuth: []
            responses:
                "200":
                    description: logout successfully
                    headers:
                        Set-Cookie:
                            description: invalided refresh token cookie
                            schema:
                                type: string
                    content:
                        application/json:
                            schema:
                                type: string
                "401":
                    $ref: '#/components/responses/UnauthorizedAccessError'
                "500":
                    $ref: '#/components/responses/InternalServerError'


    # /users/{userID}:
    #     # GET /api/v1/users/{userID}
    #     get:
    #         summary: Get user using userID
    #         description: Fetch a user information using userID
    #         operationID: fetchUserInfoByID
    #         tags:
    #             - users
    #         security:
    #             - BearerAuth: [ ]
    #         parameters:
    #             - $ref: '#/components/parameters/UserID'
    #         responses:
    #             "200":
    #                 description: Success
    #                 content:
    #                     application/json:
    #                         schema:
    #                             $ref: '#/components/schemas/FetchUserInfoResponse'
    #             "400":
    #                 $ref: '#/components/responses/BadRequestError'
    #             "404":
    #                 $ref: '#/components/responses/NotFoundError'
    #             "500":
    #                 $ref: '#/components/responses/InternalServerError'

        # delete:
        #     summary: Delete user data


components:
    parameters:
        UserID:
            name: userID
            in: path
            required: true
            schema:
                type: string
                format: googleuuid
                x-go-type: googleuuid.UUID
                x-go-type-import:
                    path: github.com/google/uuid
                    name: googleuuid

    responses:
        InternalServerError:
            description: Internal server error

        BadRequestError:
            description: Invalid input

        UnauthorizedAccessError:
            description: Unauthorized access

        NotFoundError:
            description: status not found

    securitySchemas:
        BearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        User:
            type: object
            properties:
                id:
                    type: string
                    format: googleuuid
                    example: '550e8400-e29b-41d4-a716-446655440000'
                    x-go-type: googleuuid.UUID
                    x-go-type-import:
                        path: github.com/google/uuid
                        name: googleuuid
                name:
                    $ref: '#/components/schemas/FullName'
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                age:
                    type: integer
                    example: 30
                    x-go-type: int32
                    x-oapi-codegen-extra-tags:
                        validate: gte=18
                address:
                    $ref: '#/components/schemas/Address'
                role:
                    type: string
                    example: 'customer'
                phone:
                    type: string
                    minLength: 11
                    example: "01600000000"
                is_active:
                    type: boolean
                    example: true
                hashPassword:
                    type: string
                    example: '$2a$12$yD7F9szLFSKx0PKHdRgGKu...'

        FullName:
            type: object
            properties:
                first_name:
                    type: string
                    minLength: 3
                    example: 'John'
                last_name:
                    type: string
                    minLength: 3
                    example: 'Doe'

        Address:
            type: object
            properties:
                country:
                    type: string
                    example: 'Bangladesh'
                city:
                    type: string
                    example: 'Dhaka'
                street_address:
                    type: string
                    example: '123 Main Street'
                postal_code:
                    type: string
                    example: '1207'

        # ==================== UserInformation =========================

        UpdateUserRequest:
            type: object
            properties:
                name:
                    $ref: '#/components/schemas/FullName'
                age:
                    type: integer
                    example: 30
                    x-go-type: int32
                    x-oapi-codegen-extra-tags:
                        validate: gte=18
                address:
                    $ref: '#/components/schemas/Address'
                phone:
                    type: string
                    minLength: 11
                    example: "01600000000"

        UpdateUserResponse:
            type: object
            properties:
                name:
                    $ref: '#/components/schemas/FullName'
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                age:
                    type: integer
                    example: 30
                    x-go-type: int32
                    x-oapi-codegen-extra-tags:
                        validate: gte=18
                address:
                    $ref: '#/components/schemas/Address'
                role:
                    type: string
                    example: 'customer'
                phone:
                    type: string
                    minLength: 11
                    example: "01600000000"
                is_active:
                    type: boolean
                    example: true
            required:
                - name
                - email
                - age
                - address
                - role
                - phone
                - is_active

        FetchUserInfoResponse:
            type: object
            properties:
                name:
                    $ref: '#/components/schemas/FullName'
                email:
                    type: string
                    format: email
                    example: 'user@example.com'
                age:
                    type: integer
                    example: 30
                    x-go-type: int32
                    x-oapi-codegen-extra-tags:
                        validate: gte=18
                address:
                    $ref: '#/components/schemas/Address'
                role:
                    type: string
                    example: 'customer'
                phone:
                    type: string
                    minLength: 11
                    example: "01600000000"
                is_active:
                    type: boolean
                    example: true
