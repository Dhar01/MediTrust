package models

import (
	"context"
	"time"

	"github.com/google/uuid"
)

// Medicine represents the medicine entity stored in the database
// @Description Medicine entity contains details about a medicine
type Medicine struct {
	ID           uuid.UUID `json:"id" example:"550e8400-e29b-41d4-a716-446655440000" format:"uuid"` // Unique ID of the user - auto generated by the database
	Name         string    `json:"name" example:"Paracetamol"`                                      // Medicine Name
	Description  string    `json:"description" example:"Pain reliever"`                             // Medicine Description
	Dosage       string    `json:"dosage" example:"500mg"`                                          // Medicine Dosage
	Manufacturer string    `json:"manufacturer" example:"XZY Pharma"`                               // Medicine Manufacturer
	Price        int32     `json:"price" example:"50" format:"int32"`                               // Medicine price
	Stock        int32     `json:"stock" example:"75" format:"int32"`                               // Medicine stock
	Created_at   time.Time `json:"created_at"`                                                      // Medicine creation time - auto-generated by the database
	Updated_at   time.Time `json:"updated_at"`                                                      // Medicine update time - auto-generated by the database
}

// CreateMedicineDTO represents the request body required for creating a new medicine
// @Description DTO for creating a new medicine
type CreateMedicineDTO struct {
	Name         string `json:"name" binding:"required" example:"Paracetamol"`
	Description  string `json:"description" binding:"required" example:"Pain reliever"`
	Dosage       string `json:"dosage" binding:"required" example:"500mg"`
	Manufacturer string `json:"manufacturer" binding:"required" example:"XZY Pharma"`
	Price        int32  `json:"price" binding:"required,min=0" example:"50" format:"int32"`
	Stock        int32  `json:"stock" binding:"required,min=0" example:"75" format:"int32"`
}

// UpdateMedicineDTO represents the request body required for updating a medicine
// @Description DTO for updating a medicine information
type UpdateMedicineDTO struct {
	Name         string `json:"name,omitempty" example:"Paracetamol"`
	Description  string `json:"description,omitempty" example:"Pain reliever"`
	Dosage       string `json:"dosage,omitempty" example:"500mg"`
	Manufacturer string `json:"manufacturer,omitempty" example:"XZY Pharma"`
	Price        *int32 `json:"price,omitempty" example:"50" format:"int32"`
	Stock        *int32 `json:"stock,omitempty" example:"75" format:"int32"`
}

// MedicineService defines the business logic interface for medicine management
// @Description Interface for medicine-related business logic
type MedicineService interface {
	CreateMedicine(ctx context.Context, medicine CreateMedicineDTO) (Medicine, error)
	DeleteMedicine(ctx context.Context, medID uuid.UUID) error
	UpdateMedicine(ctx context.Context, medID uuid.UUID, med UpdateMedicineDTO) (Medicine, error)
	GetMedicines(ctx context.Context) ([]Medicine, error)
	GetMedicineByID(ctx context.Context, medID uuid.UUID) (Medicine, error)
}

// MedicineRepository defines the DB operations for medicines
// @Description Interface for medicine database transactions
type MedicineRepository interface {
	Create(ctx context.Context, med Medicine) (Medicine, error)
	Delete(ctx context.Context, id uuid.UUID) error
	Update(ctx context.Context, med Medicine) (Medicine, error)
	FindByID(ctx context.Context, id uuid.UUID) (Medicine, error)
	FindAll(ctx context.Context) ([]Medicine, error)
}
